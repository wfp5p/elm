#! /bin/sh
#
# If these # comments don't work, trim them.  Don't worry about any other
# shell scripts, Configure will trim # comments from them for you.
#
# (If you are trying to port this package to a machine without sh, I would
# suggest you cut out the prototypical config.h from the end of Configure
# and edit it to reflect your system.  Some packages may include samples
# of config.h for certain machines, so you might look for one of those.)
#
# $Header: Head.U,v 2.0 88/06/28 23:13:13 lwall Locked $
#
# Yes, you may rip this off to use in other distribution packages.
# (Note: this Configure script was generated automatically.  Rather than
# working with this copy of Configure, you may wish to get metaconfig.)

: sanity checks
PATH=".:/bin:/usr/bin:/usr/local/bin:/usr/ucb:/usr/local:/usr/lbin:/etc:/usr/new:/usr/new/bin:/usr/nbin:$PATH"
export PATH || (echo "OOPS, this isn't sh.  Desperation time.  I will feed myself to sh."; sh $0; kill $$)

if test ! -t 0; then
    echo "Say 'sh Configure', not 'sh <Configure'"
    exit 1
fi

(alias) >/dev/null 2>&1 && \
    echo "(I see you are using the Korn shell.  Some ksh's blow up on Configure," && \
    echo "especially on exotic machines.  If yours does, try the Bourne shell instead.)"

if test ! -d ../UU; then
    if test ! -d UU; then
	mkdir UU
    fi
    cd UU
fi

case "$1" in
-d) shift; fastread='yes';;
esac

Log=''
Header=''
contains=''
cppstdin=''
cppminus=''
d_getopt=''
d_memcpy=''
d_mkdir=''
d_rename=''
d_symlink=''
d_whoami=''
n=''
c=''
orderlib=''
ranlib=''
package=''
pager=''
prefshell=''
startsh=''
d_eunice=''
define=''
eunicefix=''
build_dir=''
source_dir=''
loclist=''
expr=''
sed=''
echo=''
cat=''
rm=''
mv=''
cp=''
tail=''
tr=''
mkdir=''
sort=''
uniq=''
grep=''
trylist=''
test=''
inews=''
ispell=''
egrep=''
more=''
pg=''
Mcc=''
vi=''
mailx=''
mail=''
cpp=''
perl=''
emacs=''
ls=''
rmail=''
sendmail=''
shar=''
smail=''
submit=''
tbl=''
troff=''
nroff=''
uname=''
uuname=''
line=''
chgrp=''
chmod=''
lint=''
sleep=''
pr=''
tar=''
ln=''
lpr=''
lp=''
touch=''
make=''
date=''
csh=''
pmake=''
mips=''
col=''
pack=''
bld=''
compress=''
execmail=''
libswanted=''
bin=''
installbin=''
c_date=''
d_ascii=''
d_broke_ctype=''
d_broke_fflush=''
d_calendar=''
calendar=''
d_chown_neg1=''
d_content=''
d_crypt=''
cryptlib=''
d_cuserid=''
d_disphost=''
d_domname=''
d_usegetdom=''
d_errlst=''
d_flock=''
d_dotlock=''
d_fcntlock=''
lock_dir=''
has_flock=''
has_fcntl=''
d_fsync=''
d_ftruncate=''
d_gethname=''
d_douname=''
d_host_comp=''
ign_hname=''
d_index=''
d_internet=''
d_ispell=''
ispell_path=''
ispell_options=''
d_locale=''
d_nl_types=''
d_msgcat=''
d_usenls=''
d_mboxedit=''
d_mime=''
defcharset=''
defdispcharset=''
d_mmdf=''
d_newauto=''
d_noaddfrom=''
d_usedomain=''
d_noxheader=''
d_pidcheck=''
d_ptem=''
d_putenv=''
d_remlock=''
maxattempts=''
d_setegid=''
d_setgid=''
d_savegrpmboxid=''
mailermode=''
d_sigvec=''
d_sigvectr=''
d_sigset=''
d_sighold=''
d_sigprocmask=''
d_sigblock=''
d_sigaction=''
d_statuschg=''
d_strcspn=''
d_strspn=''
d_strpbrk=''
d_strerror=''
d_strftime=''
d_strings=''
d_pwdinsys=''
strings=''
includepath=''
d_strstr=''
d_strtok=''
d_subshell=''
d_tempnam=''
tempnamo=''
tempnamc=''
d_termio=''
d_termios=''
d_useembed=''
d_utimbuf=''
d_vfork=''
defbatsub=''
defeditor=''
editoropts=''
hostname=''
phostname=''
mydomain=''
autohostname=''
i_memory=''
i_stdarg=''
i_stdlib=''
i_time=''
i_systime=''
d_systimekernel=''
i_unistd=''
i_utime=''
i_sysutime=''
lib=''
installlib=''
libc=''
linepr=''
maildir=''
mailer=''
mailgrp=''
mansrc=''
catmansrc=''
manext=''
manext_choice=''
catmanext=''
catmanext_choice=''
packed=''
manroff=''
manroffopts=''
suffix=''
packer=''
models=''
split=''
small=''
medium=''
large=''
huge=''
optimize=''
ccflags=''
cppflags=''
ldflags=''
cc=''
libs=''
nametype=''
d_passnames=''
d_berknames=''
d_usgnames=''
passcat=''
rmttape=''
roff=''
roffopts=''
sigtype=''
spitshell=''
shsharp=''
sharpbang=''
termlib=''
tmpdir=''
tzname_handling=''
xencf=''
xenlf=''
d_xenix=''
d_bsd=''
CONFIG=''
: set package name
package=elm2.5

# Revision 1.2  1995/06/30  14:56:06  wfp5p
# Alpha 5
#
# Revision 1.1.1.1  1995/04/19  20:38:26  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:54  wfp5p
# Elm 2
#
echo " "
echo "Beginning of configuration questions for $package kit."
: Eunice requires " " instead of "", can you believe it
echo " "

define='define'
undef='undef'
: change the next line if compiling for Xenix/286 on Xenix/386
xlibpth='/usr/lib/386 /lib/386 /lib'
libpth='/usr/lib /usr/ccs/lib /usr/local/lib /usr/lib/large /lib '$xlibpth' /lib/large /usr/lib/small /lib/small'
smallmach='pdp11 i8086 z8000 i80286 iAPX286'
rmlist='kit[1-9]isdone kit[1-9][0-9]isdone'
trap 'echo " "; rm -f $rmlist; exit 1' 1 2 3

: We must find out about Eunice early
eunicefix=':'
if test -f /etc/unixtovms; then
    eunicefix=/etc/unixtovms
fi
if test -f /etc/unixtovms.exe; then
    eunicefix=/etc/unixtovms.exe
fi

: See if the sources are somewhere other than where we are doing the build.

build_dir=`cd .. ; pwd`
source_dir="$build_dir"
if test ! -f $source_dir/MANIFEST ; then
		# Most shells leave the full pathname to the script in $0
		# so we should be able to use that to locate the sources.
	echo "I do not see the source files here."
	source_dir=`dirname $0`
	case "$source_dir" in
	/*)	;;
	*)	source_dir=`cd $source_dir ; pwd` ;;
	esac
	if test ! -f $source_dir/MANIFEST ; then
		echo "You are missing some or all of the source distribution."
		echo "Please reload the software and try again."
		exit 1
	fi
	echo "Aha!  I found them."
	echo "  build directory  = $build_dir"
	echo "  source directory = $source_dir"
fi

: Now test for existence of everything in MANIFEST

echo "First let's make sure your kit is complete.  Checking..."
awk '$1 !~ /PACKINGLIST/ {print $1}' $source_dir/MANIFEST | split -100
rm -f missing
for filelist in x??; do
    (cd $source_dir; ls `cat $build_dir/UU/$filelist` >/dev/null 2>>$build_dir/UU/missing)
done
if test -s missing; then
    cat missing
    kill $$
fi
echo "Looks good..."

: Do one time items.....

cd $source_dir
for file in OneTime.PL* ; do
	if test -f "$file" ; then
		echo "Executing patch cleanup script $file . . ."
		. ./$file
	fi
done
cd $build_dir/UU

d_newshome="/usr/NeWS"
defvoidused=7
attrlist="mc68000 sun gcos unix ibm gimpel interdata tss os mert pyr"
attrlist="$attrlist vax pdp11 i8086 z8000 u3b2 u3b5 u3b20 u3b200"
attrlist="$attrlist hpux hp9000s300 hp9000s500 hp9000s800"
attrlist="$attrlist ns32000 ns16000 iAPX286 mc300 mc500 mc700 sparc"
attrlist="$attrlist nsc32000 sinix xenix venix posix ansi M_XENIX"
attrlist="$attrlist $mc68k __STDC__ UTS M_I8086 M_I186 M_I286 M_I386"
attrlist="$attrlist i186 __m88k__ m88k DGUX __DGUX__ NeXT _AIX ultrix"
pth="/bin /usr/bin /usr/ucb /sbin /usr/sbin /usr/local /usr/local/bin /usr/lbin"
pth="$pth /usr/5bin /vol/local/bin /etc /usr/bsd /usr/lib /usr/ccs/lib /usr/ccs/bin /lib"
pth="$pth /usr/local/lib /sys5.3/bin /sys5.3/usr/bin /bsd4.3/bin /bsd4.3/usr/bin /bsd4.3/usr/ucb"
pth="$pth /usr/convex /usr/mmdf/bin /usr/mmdf/lib /usr/lib/mail"
pth="$pth ${BSDBASE-/bsd}/usr/ucb ${BSDBASE-/bsd}/bin ${BSDBASE-/bsd}/usr/bin"
# Revision 1.1.1.1  1995/04/19  20:38:26  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:54  wfp5p
# Elm 2
#

: check for out bin directory
if test ! -d ../bin; then
    echo "Making bin directory"
    mkdir ../bin
else
    echo "Found bin directory"
fi

libswanted="intl nls"
attrlist="$attrlist sgi"

: some greps do not return status, grrr.
echo "grimblepritz" >grimble
if grep blurfldyick grimble >/dev/null 2>&1 ; then
    contains=contains
elif grep grimblepritz grimble >/dev/null 2>&1 ; then
    contains=grep
else
    contains=contains
fi
rm -f grimble
: the following should work in any shell
case "$contains" in
contains*)
    echo " "
    echo "AGH!  Grep doesn't return a status.  Attempting remedial action."
    cat >contains <<'EOSS'
grep "$1" "$2" >.greptmp && cat .greptmp && test -s .greptmp
EOSS
chmod +x contains
esac

# Revision 1.1.1.1  1995/04/19  20:38:28  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:55  wfp5p
# Elm 2
#
: see if sh knows # comments
echo " "
echo "Checking your sh to see if it knows about # comments..."
if sh -c '#' >/dev/null 2>&1 ; then
    echo "Your sh handles # comments correctly."
    shsharp=true
    spitshell=cat
    echo " "
    echo "Okay, let's see if #! works on this system..."
    e=/bin/echo; test -f $e || e=/usr/bin/echo
    echo "#!$e hi" > try
    $eunicefix try
    chmod +x try
    ./try > today
    if $contains hi today >/dev/null 2>&1; then
	echo "It does."
	sharpbang='#!'
    else
	echo "#! $e hi" > try
	$eunicefix try
	chmod +x try
	./try > today
	if test -s today; then
	    echo "It does."
	    sharpbang='#! '
	else
	    echo "It doesn't."
	    sharpbang=': use '
	fi
    fi
else
    echo "Your sh doesn't grok # comments--I will strip them later on."
    shsharp=false
    echo "exec grep -v '^#'" >spitshell
    chmod +x spitshell
    $eunicefix spitshell
    spitshell=`pwd`/spitshell
    echo "I presume that if # doesn't work, #! won't work either!"
    sharpbang=': use '
fi

: figure out how to guarantee sh startup
echo " "
echo "Checking out how to guarantee sh startup..."
startsh=$sharpbang'/bin/sh'
echo "Let's see if '$startsh' works..."
cat >try <<EOSS
$startsh
set abc
test "$?abc" != 1
EOSS

chmod +x try
$eunicefix try
if ./try; then
    echo "Yup, it does."
else
    echo "Nope.  You may have to fix up the shell scripts to make sure sh runs them."
fi
rm -f try today

: first determine how to suppress newline on echo command
echo "Checking echo to see how to suppress newlines..."
(echo "hi there\c" ; echo " ") >.echotmp
if $contains c .echotmp >/dev/null 2>&1 ; then
    echo "...using -n."
    n='-n'
    c=''
else
    cat <<'EOM'
...using \c
EOM
    n=''
    c='\c'
fi
echo $n "Type carriage return to continue.  Your cursor should be here-->$c"
read ans
rm -f .echotmp

: now set up to do reads with possible shell escape and default assignment
cat <<EOSC >myread
case "\$fastread" in
yes) ans=''; echo " " ;;
*) ans='!';;
esac
while expr "X\$ans" : "X!" >/dev/null; do
    read ans
    case "\$ans" in
    !)
	sh
	echo " "
	echo $n "\$rp $c"
	;;
    !*)
	set \`expr "X\$ans" : "X!\(.*\)\$"\`
	sh -c "\$*"
	echo " "
	echo $n "\$rp $c"
	;;
    esac
done
rp='Your answer:'
case "\$ans" in
'') ans="\$dflt";;
esac
EOSC

# Revision 1.1.1.1  1995/04/19  20:38:26  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:53  wfp5p
# Elm 2
#
: general instructions
cat <<EOH
 
This installation shell script will examine your system and ask you questions
to determine how the $package package should be installed.  If you get stuck
on a question, you may use a ! shell escape to start a subshell or execute
a command.  Many of the questions will have default answers in square
brackets--typing carriage return will give you the default.

On some of the questions which ask for file or directory names you are
allowed to use the ~name construct to specify the login directory belonging
to "name", even if you don't have a shell which knows about that.  Questions
where this is allowed will be marked "(~name ok)".

EOH
rp="[Type carriage return to continue]"
echo $n "$rp $c"
. myread
cat <<EOH

Much effort has been expended to ensure that this shell script will run
on any Unix system.  If despite that it blows up on you, your best bet is
to edit Configure and run it again. Also, let the Elm Development Group
(elm@dsi.com) know how they blew it.  If you can't run Configure for
some reason, you'll have to generate a config.sh file by hand.

This installation script affects things in two ways: 1) it may do direct
variable substitutions on some of the files included in this kit, and
2) it builds a config.h file for inclusion in C programs.  You may edit
any of these files as the need arises after running this script.

If you make a mistake on a question, there is no easy way to back up to it
currently.  The easiest thing to do is to edit config.sh and rerun all the
SH files.  Configure will offer to let you do this before it runs the SH files.

EOH
rp="[Type carriage return to continue]"
echo $n "$rp $c"
. myread

# Revision 1.1  1995/06/30  14:56:07  wfp5p
# Alpha 5
#
: get old answers, if there is a config file out there
if test -f ../config.sh; then
    echo " "
    dflt=y
    rp="I see a config.sh file.  Did Configure make it on THIS system? [$dflt]"
    echo $n "$rp $c"
    . myread
    case "$ans" in
    n*) echo "OK, I'll ignore it.";;
    *)  echo "Fetching default answers from your old config.sh file..."
	tmp="$n"
	ans="$c"
	save_source_dir="$source_dir" save_build_dir="$build_dir"
        . ../config.sh
	source_dir="$save_source_dir" build_dir="$save_build_dir"
	n="$tmp"
	c="$ans"
	;;
    esac
fi

# Revision 1.2  1999/03/24  14:03:31  wfp5p
# elm 2.5PL0
#
# Revision 1.1.1.1  1995/04/19  20:38:26  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:54  wfp5p
# Elm 2
#
: find out where common programs are
echo " "
echo "Locating common programs..."
cat <<EOSC >loc
$startsh
case \$# in
0) exit 1;;
esac
thing=\$1
shift
dflt=\$1
shift
for dir in \$*; do
    case "\$thing" in
    .)
	if test -d \$dir/\$thing; then
	    echo \$dir
	    exit 0
	fi
	;;
    *)
	if test -f \$dir/\$thing; then
	    echo \$dir/\$thing
	    exit 0
	elif test -f \$dir/\$thing.exe; then
	    : on Eunice apparently
	    echo \$dir/\$thing
	    exit 0
	fi
	;;
    esac
done
echo \$dflt
exit 1
EOSC
chmod +x loc
$eunicefix loc
loclist="
cat
chgrp
chmod
cp
echo
expr
grep
ln
ls
mv
rm
sed
sleep
touch
tr
"
trylist="
Mcc
compress
cpp
date
emacs
execmail
ispell
line
lint
lp
lpr
mips
more
nroff
pack
pg
pr
rmail
sendmail
shar
smail
submit
tar
tbl
test
troff
uname
uuname
vi
"
for file in $loclist; do
    xxx=`loc $file $file $pth`
    eval $file=$xxx
    eval _$file=$xxx
    case "$xxx" in
    /*)
	echo $file is in $xxx.
	;;
    *)
	echo "I don't know where $file is.  I hope it's in everyone's PATH."
	;;
    esac
done
echo " "
echo "Don't worry if any of the following aren't found..."
ans=offhand
for file in $trylist; do
    xxx=`loc $file $file $pth`
    eval $file=$xxx
    eval _$file=$xxx
    case "$xxx" in
    /*)
	echo $file is in $xxx.
	;;
    *)
	echo "I don't see $file out there, $ans."
	ans=either
	;;
    esac
done
case "$egrep" in
egrep)
    echo "Substituting grep for egrep."
    egrep=$grep
    ;;
esac
case "$test" in
test)
    echo "Hopefully test is built into your sh."
    ;;
/bin/test)
    if sh -c "PATH= test true" >/dev/null 2>&1; then
	echo "Using the test built into your sh."
	test=test
    fi
    ;;
*)
    test=test
    ;;
esac
case "$echo" in
echo)
    echo "Hopefully echo is built into your sh."
    ;;
/bin/echo)
    echo " "
    echo "Checking compatibility between /bin/echo and builtin echo (if any)..."
    $echo $n "hi there$c" >foo1
    echo $n "hi there$c" >foo2
    if cmp foo1 foo2 >/dev/null 2>&1; then
	echo "They are compatible.  In fact, they may be identical."
    else
	case "$n" in
	'-n') n='' c='\c' ans='\c' ;;
	*) n='-n' c='' ans='-n' ;;
	esac
	cat <<FOO
They are not compatible!  You are probably running ksh on a non-USG system.
I'll have to use /bin/echo instead of the builtin, since Bourne shell doesn't
have echo built in and we may have to run some Bourne shell scripts.  That
means I'll have to use $ans to suppress newlines now.  Life is ridiculous.

FOO
	rp="Your cursor should be here-->"
	$echo $n "$rp$c"
	. myread
    fi
    $rm -f foo1 foo2
    ;;
*)
    : cross your fingers
    echo=echo
    ;;
esac
rmlist="$rmlist loc"

: see if date exists, if so, init c_date
if $test ! "x$date" = "x" ; then
    c_date=`LANGUAGE= $date`
else
    c_date='date was unavailable at configuration'
fi

# Revision 1.1.1.1  1995/04/19  20:38:26  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:53  wfp5p
# Elm 2
#
: get calendar mode and default calendar file name
$cat <<EOM

There is a neat feature that enables scanning of the message body for
entries to add to the users ".calendar" (or whatever) file.  These
entries are then processed by the system program calendar.  To use
this feature it needs to be enabled.  The name of the per user calendar
file used by your system's calendar program is also required.
EOM

case "$d_calendar" in
"$define") dflt=y;;
"$undef")  dflt=n;;
*)	   dflt=y;;
esac

rp="Enable calendar feature [$dflt]"
$echo $n "$rp $c"
. myread
case "$ans" in
y*) d_calendar="$define";;
*)  d_calendar="$undef";;
esac

case "$calendar" in
    '') dflt='calendar';;
    *)  dflt=$calendar;;
esac

if $test "$d_calendar" = "$define"; then
	echo " "
	rp="Default calendar file: [$dflt]"
	$echo $n "$rp $c"
	. myread
	calendar="$ans"
fi

# Revision 1.1.1.1  1995/04/19  20:38:26  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:53  wfp5p
# Elm 2
#
: check to see if the macros are 8-bit clean, ask the user
:
$cat <<EOM


Not all environments are restricted to the ASCII 7-bit character set.
For example, the ISO 8859/1 (Latin alphabet no. 1) character set,
consisting of 8 bits and 191 printable characters, is becoming
more and more common, especially in non-English speaking countries.

Unfortunately, not all isprint() functions or macros, which ELM
uses to determine whether a character is printable or not, will
handle non-ASCII (8-bit) characters properly.  It is suggested that you
start with this value configured to handle 8-bit characters correctly
and if there are problems with Elm aborting while displaying messages
that use extended character sets to reconfigure Elm to only display
7-bit characters.

EOM

case "$d_ascii" in
    "$define")   dflt='n';;
    *)  dflt='y';;
esac

echo "  "
rp="Should Elm assume that isprint() won't break on non-ASCII characters? [$dflt]"
$echo $n "$rp $c"
. myread
case "$ans" in
    y*) d_ascii="$undef";;
    *) d_ascii="$define";;
esac

# Revision 1.2  1995/06/08  15:44:41  wfp5p
# Changes to configure for AIX
#
# Revision 1.1.1.1  1995/04/19  20:38:26  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:53  wfp5p
# Elm 2
#
: make some quick guesses about what we are up against
echo " "
$echo $n "Hmm...  $c"
if $test -f "$uname"; then
    uname_os=`$uname -s`
    uname_rel=`$uname -r`
    uname_rel=`expr "$uname_rel" : "\(...\).*"`
else
    uname_os=unknown
    uname_rel=unknown
fi
cat /usr/include/signal.h /usr/include/sys/signal.h >foo
if test `echo abc | tr a-z A-Z` = Abc ; then

    if $test "$uname_os" = "AIX" ; then
        echo "Looks like an AIX system, but we'll see.."
	echo exit 0 >bsd
	echo exit 1 >usg
	echo exit 1 >v7
    else	
       echo "Looks kind of like a USG system, but we'll see..."
       echo exit 1 >bsd
       echo exit 0 >usg
       echo exit 1 >v7
    fi
elif $contains SIGTSTP foo >/dev/null 2>&1 ; then
    if $test "(" "$uname_os" = "SunOS" -a "$uname_rel" = "4.1" ")" ; then
	echo "Looks like SunOs 4.1, a USG system, but we'll see..."
	echo exit 1 >bsd
	echo exit 0 >usg
	echo exit 1 >v7
    elif $test "$uname_os" = "OSF1" ; then
	echo "Looks like an OSF/1 system, but we'll see.."
	echo exit 1 >bsd
	echo exit 1 >usg
	echo exit 1 >v7
    elif $test "$uname_os" = "HP-UX" ; then
	echo "Looks like an HP-UX system, but we'll see.."
	echo exit 1 >bsd
	echo exit 0 >usg
	echo exit 1 >v7
    else
	echo "Looks kind of like a BSD system, but we'll see..."
	echo exit 0 >bsd
	echo exit 0 >usg
	echo exit 1 >v7
    fi
else
    echo "Looks kind of like a version 7 system, but we'll see..."
    echo exit 1 >bsd
    echo exit 1 >usg
    echo exit 0 >v7
fi
case "$eunicefix" in
*unixtovms*)
    cat <<'EOI'
There is, however, a strange, musty smell in the air that reminds me of
something...hmm...yes...I've got it...there's a VMS nearby, or I'm a Blit.
EOI
    echo "exit 0" >eunice
    d_eunice="$define"
    ;;
*)
    echo " "
    echo "Congratulations.  You aren't running Eunice."
    d_eunice="$undef"
    echo "exit 1" >eunice
    ;;
esac
if test -f /xenix; then
    echo "Actually, this looks more like a XENIX system..."
    echo "exit 0" >xenix
else
    echo " "
    echo "It's not Xenix..."
    echo "exit 1" >xenix
fi
chmod +x xenix
$eunicefix xenix
if test -f /venix; then
    echo "Actually, this looks more like a VENIX system..."
    echo "exit 0" >venix
else
    echo " "
    if xenix; then
	: null
    else
	echo "Nor is it Venix..."
    fi
    echo "exit 1" >venix
fi
chmod +x bsd usg v7 eunice venix
$eunicefix bsd usg v7 eunice venix
rm -rf foo
rmlist="$rmlist bsd usg v7 eunice venix xenix"

# Revision 1.2  1995/06/12  20:30:51  wfp5p
# Made the Ultrix fflush check automatic
# Changed gcc options
#
# Revision 1.1.1.1  1995/04/19  20:38:28  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:54  wfp5p
# Elm 2
#
: find out how to find out full name
echo " "
case "$d_berknames" in
"$define")
    dflt=y;;
"$undef")
    dflt=n;;
*)
	dflt=y
    ;;
esac
echo "Does your /etc/passwd file keep full names in Berkeley/V7 format (name first"
$echo $n "thing after ':' in GCOS field)? [$dflt] $c"
rp="Berkeley/V7 format full name? [$dflt]"
. myread
case "$ans" in
  y*)
    d_passnames="$define"
    d_berknames="$define"
    d_usgnames="$undef"
    nametype=bsd
    ;;
  *)
    echo " "
    case "$d_usgnames" in
    "$define")
	dflt=y;;
    "$undef")
	dflt=n;;
    *)
	if usg; then
	    dflt=y
	else
	    dflt=n
	fi
	;;
    esac
    echo "Does your passwd file keep full names in USG format (name sandwiched"
    $echo $n "between a '-' and a '(')? [$dflt] $c"
    rp="USG format full name? [$dflt]"
    . myread
    case "$ans" in
      n*)
	echo "Full name will be taken from ~/.fullname"
	d_passnames="$undef"
	d_berknames="$undef"
	d_usgnames="$undef"
	nametype=other
	;;
      *)
	d_passnames="$define"
	d_berknames="$undef"
	d_usgnames="$define"
	nametype=usg
	;;
    esac
    ;;
esac

: see if we have to deal with yellow pages, if so, put sun
: library first, as the yp password routines must override
: the c library ones
if $test -d /usr/etc/yp || $test -d /etc/yp; then
    if $test "$passcat" = "ypcat passwd"; then
	dflt=y
    elif $contains '^\+:' /etc/passwd >/dev/null; then
	dflt=y
    else
	dflt=n
    fi
    rp="Are you getting the passwd file via yellow pages? [$dflt]"
    $echo $n "$rp $c"
    . myread
    case "$ans" in
    y*) passcat='ypcat passwd'
	case "$libswanted" in
	'') libswanted='sun c_s';;
	*)  libswanted=`$echo "$libswanted" | $sed -e 's/sun //g'`
	    libswanted="sun $libswanted";;
	esac
	;;
    *) passcat='cat /etc/passwd';;
    esac
else
    passcat='cat /etc/passwd'
fi

: set up shell script to do ~ expansion
cat >filexp <<EOSS
$startsh
: expand filename
case "\$1" in
 ~/*|~)
    echo \$1 | $sed "s|~|\${HOME-\$LOGDIR}|"
    ;;
 ~*)
    if $test -f /bin/csh; then
	/bin/csh -f -c "glob \$1"
	echo ""
    else
	name=\`$expr x\$1 : '..\([^/]*\)'\`
	dir=\`$sed -n -e "/^\${name}:/{s/^[^:]*:[^:]*:[^:]*:[^:]*:[^:]*:\([^:]*\).*"'\$'"/\1/" -e p -e q -e '}' </etc/passwd\`
	if $test ! -d "\$dir"; then
	    me=\`basename \$0\`
	    echo "\$me: can't locate home directory for: \$name" >&2
	    exit 1
	fi
	case "\$1" in
	*/*)
	    echo \$dir/\`$expr x\$1 : '..[^/]*/\(.*\)'\`
	    ;;
	*)
	    echo \$dir
	    ;;
	esac
    fi
    ;;
*)
    echo \$1
    ;;
esac
EOSS
chmod +x filexp
$eunicefix filexp

# Revision 1.1.1.1  1995/04/19  20:38:28  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:55  wfp5p
# Elm 2
#
# determine text processor to use, default to troff if found.
case "$roff" in
'')
    if $test -n "$troff"; then
	dflt="$troff"
    else
	dflt=$nroff
    fi
    ;;
*)  dflt="$roff";;
esac
$cat <<EOM

The Elm documentation (Reference Guide, Configuration Guide, etc.) is set up
for troff.  If you only have nroff, it can be used, but the documentation will
not be as readable.  If you use an alternate processor for troff/nroff
documents it can be specified here.  Elm expects the text processor to write
to standard out.  You will be given a chance to provide command line options
to this command in the next question.

EOM
cont=true
while $test "$cont" ; do
    echo " "
    echo "Give the name of the program used to format the Elm documentation on"
    $echo $n "your system: [$dflt] $c"
    rp="Preferred Elm documentation formatter program: [$dflt]"
    . myread
    roff=$ans;
    if $test -f "$ans"; then
	cont=''
    else
	lookup=`loc "$ans" "" . $pth`
	if $test -f "$lookup"; then
	    cont=''
	    roff=$lookup
	else
	    if $test "$fastread" = yes; then
		dflt=y
	    else
		dflt=n
	    fi
	    echo "Text processor $ans doesn't exist."
	    rp="Use that name anyway? [$dflt]"
	    $echo $n "$rp $c"
	    . myread
	    dflt=''
	    case "$ans" in
	    y*) cont='';;
	    esac
	fi
    fi
done

# determine text processor flags to use.
$cat <<EOM

If this text processor requires any options for proper formatting, specify
them here.  To specify no options, enter the word "none".  Some versions
of troff require the -t option to write to standard out.  This is the
proper place to specify that option.

EOM
dflt="$roffopts"
rp="What options should Elm use with $roff: [$dflt]"
$echo $n "$rp $c"
. myread
roffopts=$ans
case "$roffopts" in
'none') roffopts=''
     ;;
esac

# Revision 1.1.1.1  1995/04/19  20:38:28  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:54  wfp5p
# Elm 2
#
: determine where manual pages go
$cat <<EOM
  
$package has manual pages that can be installed in unformatted or formatted form.
Either or both (or neither) of these may be installed. 

Please give the location in which to store each type of man page. 
To specify that a particular type is not to be installed, answer "none"
to the question.

EOM
case "$mansrc" in
'')
    dflt="/usr/man/mann /usr/man/manl /usr/man/man.L /usr/man/local/man1"
    dflt="$dflt /usr/man/l_man/man1 /usr/local/man/u_man/man1"
    dflt="$dflt /usr/local/man/l_man/man1 /usr/man/man1 /usr/man/u_man/man1"
    dflt="$dflt /usr/share/man/man1 /usr/share/man/manl"
    dflt=`loc . none $dflt`
    ;;
*)  dflt="$mansrc"
    ;;
esac
cont=true
while $test "$cont" ; do
    echo " "
    rp="Where do the unformatted manual pages go? [$dflt]"
    $echo $n "$rp $c"
    . myread
    mansrc=`filexp "$ans"`
    if $test "$mansrc" = none -o -d "$mansrc"; then
	cont=''
    else
	if $test "$fastread" = yes; then
	    dflt=y
	else
	    dflt=n
	fi
	rp="Directory $mansrc doesn't exist.  Use that name anyway? [$dflt]"
	$echo $n "$rp $c"
	. myread
	dflt=''
	case "$ans" in
	y*) cont='';;
	esac
    fi
done

# determine the extension for man pages
if $test "$mansrc" != none ; then
    case "$manext" in
    '')
	if $test "$manext_choice" = none; then
	    dflt=none
	else
	    case "$mansrc" in
	    *l) dflt=.l ;;
	    *n) dflt=.n ;;
	    *L) dflt=.L ;;
	    *)  dflt=.1 ;;
	    esac
	fi
	;;
    .*)	dflt="$manext";;
    *)  dflt=".$manext";;
    esac

    $cat <<EOM

The installed unformatted manual pages can have various extensions to suit the
conventions of the host operating system, for example "page.1".

Note that the period '.' must be included as part of the extension.

To specify no extension, enter the word "none".

EOM
    rp="What extension should be used on installed unformatted man pages: [$dflt]"
    $echo $n "$rp $c"
    . myread
    manext=$ans
    manext_choice=$ans
    case "$manext" in
    'none')
	manext=''
	;;
    esac
    fi

# Now the formatted man pages ala System V
case "$catmansrc" in
'')
    dflt="/usr/man/catn /usr/man/catl /usr/catman/man.L /usr/catman/local/man1"
    dflt="$dflt /usr/local/catman/u_man/man1 /usr/local/catman/l_man/man1"
    dflt="$dflt /usr/catman/l_man/man1 /usr/man/cat1 /usr/catman/man1"
    dflt="$dflt /usr/catman/u_man/man1 /usr/catman/URM/g1"
    dflt="$dflt /usr/share/man/cat1 /usr/share/man/catl"
    dflt=`loc . none $dflt`
    ;;
*)  dflt="$catmansrc"
    ;;
esac
cont=true
while $test "$cont" ; do
    echo " "
    rp="Where do the formatted manual pages go? [$dflt]"
    $echo $n "$rp $c"
    . myread
    catmansrc=`filexp "$ans"`
    if $test "$catmansrc" = none -o -d "$catmansrc"; then
	cont=''
    else
	if $test "$fastread" = yes; then
	    dflt=y
	else
	    dflt=n
	fi
	rp="Directory $catmansrc doesn't exist.  Use that name anyway? [$dflt]"
	$echo $n "$rp $c"
	. myread
	dflt=''
	case "$ans" in
	y*) cont='';;
	esac
    fi
done

# if installing formatted manual pages, determine a number of other things.
if $test "$catmansrc" != none ; then
#       determine text processor to use, default to nroff if found.
    case "$manroff" in
    '')
	if $test -n "$nroff"; then
	    dflt="$nroff"
	else
	    dflt=$troff
	fi
	;;
    *)  dflt="$manroff";;
    esac
    $cat <<EOM

Online manual pages are generally formatted with nroff.  If you use an 
alternate text processor for on-line manual pages it can be specified here. 
Elm expects the text processor to write to standard out.

Note: This does not effect the formatter previously chosen for the Elm
      Elm documentation (Reference Guide, Configuration Guide, etc.).

EOM
    cont=true
    while $test "$cont" ; do
	echo " "
	echo "Give the name of the program used to format on-line manual pages"
	$echo $n "on your system: [$dflt] $c"
	rp="Preferred manual page formatter: [$dflt]"
	. myread
	manroff=$ans;
	if $test -f "$ans"; then
	    cont=''
	else
	    lookup=`loc "$ans" "" . $pth`
	    if $test -f "$lookup"; then
		cont=''
		manroff=$lookup
	    else
		if $test "$fastread" = yes; then
		    dflt=y
  		else
  		    dflt=n
  		fi
		echo "Text processor $ans doesn't exist."
		rp="Use that name anyway? [$dflt]"
		$echo $n "$rp $c"
		. myread
		dflt=''
		case "$ans" in
		y*) cont='';;
		esac
	    fi
	fi
    done

    # determine text processor flags to use.
    $cat <<EOM

If this text processor requires any options for proper formatting, specify
then here.  To specify no options, enter the word "none".

EOM
    dflt="$manroffopts"
    rp="What options should Elm use with $manroff: [$dflt]"
    $echo $n "$rp $c"
    . myread
    manroffopts=$ans
    case "$manroffopts" in
    'none') manroffopts=''
	;;
    esac

    # determine the extension for catman pages
    case "$catmanext" in
    '')
	if $test "$catmanext_choice" = none; then
	    dflt=none
	else
	    case "$manext" in
	    .*) dflt=$manext ;;
	    *)
		if $test "$manext_choice" = none; then
		    dflt=none
		else
	            case "$catmansrc" in
	            *l) dflt=.l ;;
	            *n) dflt=.n ;;
	            *L) dflt=.L ;;
	            *g1) dflt=none ;;
	            *)  dflt=.1 ;;
	            esac
		fi
	    esac
	fi
	;;
    .*)	dflt="$catmanext";;
    *)  dflt=".$catmanext";;
    esac

    $cat <<EOM

The installed formatted manual pages can have various extensions to suit the
conventions of the host operating system, for example "page.1".

Note that the period '.' must be included as part of the extension.

To specify no extension, enter the word "none".

EOM
    rp="What extension should be used on installed formatted man pages: [$dflt]"
    $echo $n "$rp $c"
    . myread
    catmanext=$ans
    catmanext_choice=$ans
    case "$catmanext" in
    'none')
	catmanext=''
	;;
    esac

    if $test -f $pack -o -f $compress ; then
#	See if the formatted manual pages are to be packed or compressed
	if $test -f $pack; then
	    $cat <<EOM

The formatted manual pages may be packed (.z suffix) or compressed (.Z
suffix) or left unpacked on your system.  The next two questions will deal
with how you want the formatted manual pages installed.  Answering no to
both packed and compressed will leave them unpacked.  Only one of packed
or compressed can be chosen.

EOM
	    case "$suffix" in
	    .Z) dflt=n;;
	    .z) dflt=y;;
	    *)  if [ "$catmansrc/*.z" != "`$echo $catmansrc/*.z`" ]; then
		    dflt=y
		else
		    dflt=n
		fi ;;
	    esac
	    rp="Should the formatted manual pages be packed? [$dflt]"
	    $echo $n "$rp $c"
	    . myread
	    case "$ans" in
	    y*) packed=y
		suffix=.z
		packer="$pack -f" ;;
	    *)  packed=n ;;
	    esac
	fi

	if $test -f $compress -a "$suffix" != ".z" ; then
	    case "$suffix" in
	    .z) dflt=n;;
	    .Z) dflt=y;;
	    *)  if [ "$catmansrc/*.Z" != "`$echo $catmansrc/*.Z`" ]; then
		    dflt=y
		else
		    dflt=n
		fi ;;
	    esac
	    rp="Should the formatted manual pages be compressed? [$dflt]"
	    $echo $n "$rp $c"
	    . myread
	    case "$ans" in
	    y*) packed=y
		suffix=.Z
		packer="$compress" ;;
	    *)  packed=n ;;
	    esac
	fi

	if $test "$packed" = 'n' ; then
	    suffix=''
	    packer=''
	fi
    else
	packed=''
	suffix=''
	packer=''
    fi

fi

# Revision 1.1.1.1  1995/04/19  20:38:28  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:56  wfp5p
# Elm 2
#
: default clear to no extra flags
xencf=
xenlf=
d_xenix="$undef"
d_bsd="$undef"
: see if we are xenix 
if xenix; then
    d_xenix="$define"
:	now are we a 286
    case "`$uname -p`" in
	i80286) 
		xencf="-LARGE -Ml2et32"
		xenlf="-Ml2t32 -F 5600 -SEG 512"
      esac
fi
if bsd; then
    d_bsd="$define"
fi

# Revision 1.4  1995/06/12  20:30:50  wfp5p
# Made the Ultrix fflush check automatic
# Changed gcc options
#
# Revision 1.3  1995/04/26  18:49:47  wfp5p
# Changed Configure to allow a different install path
#
# Revision 1.2  1995/04/21  13:30:07  wfp5p
# Added a note about -DULTRIX_FFLUSH_BUG
#
# Revision 1.1.1.1  1995/04/19  20:38:28  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:54  wfp5p
# Elm 2
#
: see what memory models we can support
case "$models" in
'')
    : We may not use Cppsym or we get a circular dependency through cc.
    : But this should work regardless of which cc we eventually use.
    cat >pdp11.c <<'EOP'
main() {
#ifdef pdp11
    exit(0);
#else
    exit(1);
#endif
}
EOP
    cc -o pdp11 pdp11.c >/dev/null 2>&1
    if pdp11 2>/dev/null; then
	dflt='unsplit split'
    else
	ans=`loc . X /lib/small /lib/large /usr/lib/small /usr/lib/large /lib/medium /usr/lib/medium /lib/huge`
	case "$ans" in
	X) dflt='none';;
	*)  if $test -d /lib/small || $test -d /usr/lib/small; then
		dflt='small'
	    else
		dflt=''
	    fi
	    if $test -d /lib/medium || $test -d /usr/lib/medium; then
		dflt="$dflt medium"
	    fi
	    if $test -d /lib/large || $test -d /usr/lib/large; then
		dflt="$dflt large"
	    fi
	    if $test -d /lib/huge || $test -d /usr/lib/huge; then
		dflt="$dflt huge"
	    fi
	esac
    fi
    ;;
*)  dflt="$models" ;;
esac
if $test -z "$xencf" ; then
$cat <<EOM
 
Some systems have different model sizes.  On most systems they are called
small, medium, large, and huge.  On the PDP11 they are called unsplit and
split.  If your system doesn't support different memory models, say "none".
If you wish to force everything to one memory model, say "none" here and
put the appropriate flags later when it asks you for other cc and ld flags.
Xenix and Venix systems may wish to put "none" and let the compiler figure
things out.
(In the following question multiple model names should be space separated.)

EOM
rp="Which models are supported? [$dflt]"
$echo $n "$rp $c"
. myread
models="$ans"

case "$models" in
none)
    small=''
    medium=''
    large=''
    huge=''
    unsplit=''
    split=''
    ;;
*split)
    case "$split" in
    '') 
	if $contains '\-i' $mansrc/man1/ld.1 >/dev/null 2>&1 || \
	   $contains '\-i' $mansrc/man1/cc.1 >/dev/null 2>&1; then
	    dflt='-i'
	else
	    dflt='none'
	fi
	;;
    *) dflt="$split";;
    esac
    rp="What flag indicates separate I and D space? [$dflt]"
    $echo $n "$rp $c"
    . myread
    case "$ans" in
    none) ans='';;
    esac
    split="$ans"
    unsplit=''
    ;;
*large*|*small*|*medium*|*huge*)
    case "$models" in
    *large*)
	case "$large" in
	'') dflt='-Ml';;
	*) dflt="$large";;
	esac
	rp="What flag indicates large model? [$dflt]"
	$echo $n "$rp $c"
	. myread
	case "$ans" in
	none) ans='';
	esac
	large="$ans"
	;;
    *) large='';;
    esac
    case "$models" in
    *huge*)
	case "$huge" in
	'') dflt='-Mh';;
	*) dflt="$huge";;
	esac
	rp="What flag indicates huge model? [$dflt]"
	$echo $n "$rp $c"
	. myread
	case "$ans" in
	none) ans='';
	esac
	huge="$ans"
	;;
    *) huge="$large";;
    esac
    case "$models" in
    *medium*)
	case "$medium" in
	'') dflt='-Mm';;
	*) dflt="$medium";;
	esac
	rp="What flag indicates medium model? [$dflt]"
	$echo $n "$rp $c"
	. myread
	case "$ans" in
	none) ans='';
	esac
	medium="$ans"
	;;
    *) medium="$large";;
    esac
    case "$models" in
    *small*)
	case "$small" in
	'') dflt='none';;
	*) dflt="$small";;
	esac
	rp="What flag indicates small model? [$dflt]"
	$echo $n "$rp $c"
	. myread
	case "$ans" in
	none) ans='';
	esac
	small="$ans"
	;;
    *) small='';;
    esac
    ;;
*)
    echo "Unrecognized memory models--you may have to edit Makefile.SH"
    ;;
esac
fi

: see if we need a special compiler
echo " "
if usg; then
    case "$cc" in
    '')
	case "$Mcc" in
	/*) dflt='Mcc'
	    ;;
	*)
	    case "$large" in
	    -M*)
		dflt='cc'
		;;
	    *)
		if $contains '\-M' $mansrc/cc.1 >/dev/null 2>&1 ; then
		    dflt='cc -M'
		else
		    dflt='cc'
		fi
		;;
	    esac
	    ;;
	esac
	;;
    *)  dflt="$cc";;
    esac
    $cat <<'EOM'
  
On some systems the default C compiler will not resolve multiple global
references that happen to have the same name.  On some such systems the
"Mcc" command may be used to force these to be resolved.  On other systems
a "cc -M" command is required.  (Note that the -M flag on other systems
indicates a memory model to use!)  If you have the Gnu C compiler, you
might wish to use that instead.  
EOM
    $echo $n "What command will force resolution on this system? [$dflt] $c"
    rp="Command to resolve multiple refs? [$dflt]"
    . myread
    cc="$ans"
else
    case "$cc" in
    '') dflt=cc;;
    *) dflt="$cc";;
    esac
    rp="Use which C compiler? [$dflt]"
    $echo $n "$rp $c"
    . myread
    cc="$ans"
fi
case "$cc" in
gcc*) cpp=`loc gcc-cpp $cpp $pth`;;
esac

: determine optimize, if desired, or use for debug flag also
case "$optimize" in
' ') dflt="none"
     ;;
'') dflt="-O";
    ;;
*)  dflt="$optimize"
    ;;
esac
cat <<EOH

Some C compilers have problems with their optimizers, by default, $package
compiles with the -O flag to use the optimizer.  Alternately, you might
want to use the symbolic debugger, which uses the -g flag (on traditional
UNIX systems).  Either flag can be specified here.  To use neither flag,
specify the word "none".
  
EOH
rp="What optimizer/debugger flag should be used? [$dflt]"
$echo $n "$rp $c"
. myread
optimize="$ans"
case "$optimize" in
'none') optimize=" "
     ;;
esac

case "$ccflags" in
'') case "$cc" in
    *gcc*) dflt='-fpcc-struct-return';;
    *) dflt='';;
    esac
    ;;
*) dflt="$ccflags";;
esac
for thisincl in $inclwanted; do
    if test -d $thisincl; then
	case "$dflt" in
	*$thisincl*);;
	*) dflt="$dflt -I$thisincl";;
	esac
    fi
done
case "$optimize" in
-g*)
    case "$dflt" in
    *DEBUG*);;
    *) dflt="$dflt -DDEBUG";;
    esac
    ;;
esac
case "$dflt" in
'') dflt=none;;
esac
if $test -n "$xencf" ; then
    $echo "Xenix 286 system, using compiler flags $xencf"
    $echo "do not respecify these flags below."
    $echo ""
fi
cat <<EOH

Your C compiler may want other flags.  For this question you should
include -I/whatever and -DWHATEVER flags and any other flags used by
the C compiler, but you should NOT include libraries or ld flags like
-lwhatever.  If you want elm to honor its debug flag, add -DDEBUG.

To use no flags, specify the word "none".
  
EOH
rp="Any additional cc flags? [$dflt]"
$echo $n "$rp $c"
. myread
case "$ans" in
none) ans='';
esac
ccflags="$ans"

: the following weeds options from ccflags that are of no interest to cpp
cppflags="$ccflags"
case "$cppflags" in
'');;
*)  set X $cppflags
    cppflags=''
    for flag
    do
	case $flag in
	-D*|-I*|-U*) cppflags="$cppflags $flag";;
	esac
    done
    case "$cppflags" in
    *-*)  echo "(C preprocessor flags: $cppflags)";;
    esac
    ;;
esac

if $test -n "$xenlf" ; then
    $echo "Xenix 286 system, using linker flags $xenlf"
    $echo "do not respecify these flags below"
    $echo ""
fi
case "$ldflags" in
'') if venix; then
	dflt='-i -z'
    else
	dflt='none'
    fi
    ;;
*) dflt="$ldflags";;
esac
cat <<EOH

Your linker/loader may want other flags.  For example, you might
want to enable support for the symbolic debugger (-g on traditional
UNIX systems).  For this question you should specify those flags.
Do NOT specify libraries (-lwhatever) here.  Most systems will not
need any special flags, in which case specify "none".

EOH
rp="Any additional ld flags (NOT including libraries)? [$dflt]"
$echo $n "$rp $c"
. myread
case "$ans" in
none) ans='';
esac
ldflags="$ans"
rmlist="$rmlist pdp11"

echo " "
echo "Checking for optional libraries..."
case "$libs" in
'') dflt='';;
*) dflt="$libs";;
esac
case "$libswanted" in
'') libswanted='c_s';;
esac
for thislib in $libswanted; do
    case "$thislib" in
    dbm) thatlib=ndbm;;
    *_s) thatlib=NONE;;
    *) thatlib="${thislib}_s";;
    *) thatlib=NONE;;
    esac
    xxx=`loc lib$thislib.a X /usr/lib /usr/ccs/lib /usr/local/lib /lib`
    if test -f $xxx; then
	echo "Found -l$thislib."
	case "$dflt" in
	*-l$thislib*|*-l$thatlib*);;
	*) dflt="$dflt -l$thislib";;
	esac
    else
	xxx=`loc lib$thislib.a X $libpth`
	if test -f $xxx; then
	    echo "Found $xxx."
	    case "$dflt" in
	    *$xxx*);;
	    *) dflt="$dflt $xxx";;
	    esac
	else
	    xxx=`loc Slib$thislib.a X $xlibpth`
	    if test -f $xxx; then
		echo "Found -l$thislib."
		case "$dflt" in
		*-l$thislib*|*-l$thatlib*);;
		*) dflt="$dflt -l$thislib";;
		esac
	    else
		echo "No -l$thislib."
	    fi
	fi
    fi
done
set X $dflt
shift
dflt="$*"
if $test "$uname_os" = "QNX" ; then
  dflt="$dflt -lunix"
fi  
case "$dflt" in
'') dflt='none';;
esac

$cat <<EOM
 
Some versions of UNIX support shared libraries, which make
executables smaller but make load time slightly longer.

On some systems, mostly newer UNIX System V's, the shared library
is included by putting the option "-lc_s" as the last thing on the
cc command line when linking.  Other systems use shared libraries
by default.  There may be other libraries needed to compile $package
on your machine as well.  If your system needs the "-lc_s" option,
include it here.  Include any other special libraries here as well.
Say "none" for none.
EOM

echo " "
rp="Any additional libraries? [$dflt]"
$echo $n "$rp $c"
. myread
case "$ans" in
none) ans='';
esac
libs="$ans"

# Revision 1.4  1999/03/24  14:03:33  wfp5p
# elm 2.5PL0
#
# Revision 1.3  1997/10/20  20:23:50  wfp5p
# Better Linux support
#
# Revision 1.2  1996/03/14  17:27:15  wfp5p
# Alpha 9
#
# Revision 1.1.1.1  1995/04/19  20:38:28  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:55  wfp5p
# Elm 2
#
: get list of predefined functions in a handy place
echo " "
case "$libc" in
'') if test -d /usr/apollo; then
	libc=/lib/libc
    else
	libc=unknown
    fi
    ;;
'/lib/libc /lib/clib')
    libc=/lib/libc
    ;;
esac
case "$mips" in
'') mips=false;;
'mips') mips=false;;
esac
uname_os=`$uname -s`
case "$nm_opts" in
'') if test -f /mach_boot; then
	nm_opts=''

    elif $test "$uname_os" = "Linux" ; then
           nm_opts='-p'
    elif $test "$uname_os" = "AIX" ; then
       uname_ver=`$uname -v`
       if $test "$uname_ver" = "4" ; then
         nm_opts='-pB'
       else
         nm_opts='-p'
       fi
    elif test -d /usr/ccs/lib; then
	nm_opts='-p'
    elif "$mips"; then
	nm_opts='-B'
    else
	nm_opts=''
    fi
    ;;
esac
: on mips, we DO NOT want /lib, and we want inclPath/usr/lib
case "$libpth" in
'') if "$mips"; then
	libpth='$inclPath/usr/lib /usr/local/lib'
	nm_opts='-B'
    else
	libpth='/usr/ccs/lib /lib /usr/lib /usr/ucblib /usr/local/lib'
    fi
    ;;
esac
case "$libs" in
*-lc_s*) libc=`./loc libc_s.a $libc $libpth`
esac
libnames='';
case "$libs" in
'') ;;
*)  for thislib in $libs; do
	case "$thislib" in
	-l*) thislib=`expr X$thislib : 'X-l\(.*\)'`
	    try=`./loc lib$thislib.a blurfl/dyick $libpth`
	    if test ! -f $try; then
		try=`./loc lib$thislib blurfl/dyick $libpth`
		if test ! -f $try; then
		    try=`./loc $thislib blurfl/dyick $libpth`
		    if test ! -f $try; then
			try=`./loc Slib$thislib.a blurfl/dyick $xlibpth`
			if test ! -f $try; then
			    try=''
			fi
		    fi
		fi
	    fi
	    libnames="$libnames $try"
	    ;;
	*) libnames="$libnames $thislib" ;;
	esac
    done
    ;;
esac

if $test "$uname_os" = "Linux" ; then
    echo "You've got Linux, using /usr/lib/libc.a"
    libc=/usr/lib/libc.a
else
set /usr/ccs/lib/libc.so
test -f $1 || set /usr/lib/libc.so
test -f $1 || set /usr/lib/libc.so.[0-9]*
test -f $1 || set /lib/libsys_s.a
eval set \$$#
if test -f "$1"; then
    echo "Your shared C library is in $1."
    libc="$1"
elif test -f "$libc"; then
    echo "Your C library is in $libc."
elif test -f /lib/libc.a; then
    echo "Your C library is in /lib/libc.a.  You're normal."
    libc=/lib/libc.a
else
    if   ans=`./loc libc.a  blurfl/dyick $libpth`; test -f "$ans"; then
	:
    elif ans=`./loc libc    blurfl/dyick $libpth`; test -f "$ans"; then
	    libnames="$libnames "`./loc clib blurfl/dyick $libpth`
    elif ans=`./loc clib    blurfl/dyick $libpth`; test -f "$ans"; then
	:
    elif ans=`./loc Slibc.a blurfl/dyick $xlibpth`; test -f "$ans"; then
	:
    elif ans=`./loc Mlibc.a blurfl/dyick $xlibpth`; test -f "$ans"; then
	:
    elif ans=`./loc Llibc.a blurfl/dyick $xlibpth`; test -f "$ans"; then
	:
    fi
    if test -f "$ans"; then
	echo "Your C library is in $ans, of all places."
	libc=$ans
    else
	cat <<EOM
 
I can't seem to find your C library.  I've looked in the following places:

	$libpth

None of these seems to contain your C library.  What is the full name
EOM
	dflt=None
	$echo $n "of your C library? $c"
	rp='C library full name?'
	. myread
	libc="$ans"
    fi
fi
fi
echo " "
if test $libc = "/lib/libc"; then
    libc="$libc /lib/clib"
fi
set `echo $libc $libnames | tr ' ' '\012' | sort | uniq`
$echo $n "Extracting names from $* for later perusal...$c"
nm $nm_opts $* 2>/dev/null >libc.tmp
$sed -n -e 's/^.* [ATDSU]  *[_.]*//p' -e 's/^.* [ATDSU] //p' <libc.tmp >libc.list
if $contains '^printf$' libc.list >/dev/null 2>&1; then
    echo done
elif $sed -n -e 's/^__*//' -e 's/^\([a-zA-Z_0-9$]*\).*xtern.*/\1/p' \
	<libc.tmp >libc.list; \
  $contains '^printf$' libc.list >/dev/null 2>&1; then
    echo done
elif $sed -n -e '/|UNDEF/d' -e '/FUNC..GL/s/^.*|__*//p' <libc.tmp >libc.list; \
  $contains '^printf$' libc.list >/dev/null 2>&1; then
    echo done
elif $sed -n -e 's/^.* D __*//p' -e 's/^.* D //p' <libc.tmp >libc.list; \
  $contains '^printf$' libc.list >/dev/null 2>&1; then
    echo done
elif $sed -n -e 's/^_//' -e 's/^\([a-zA-Z_0-9]*\).*xtern.*text.*/\1/p' \
		<libc.tmp >libc.list; \
  $contains '^printf$' libc.list >/dev/null 2>&1; then
    echo done
elif $grep '|' <libc.tmp | $sed -n -e '/|COMMON/d' -e '/|DATA/d' \
                                   -e 's/^\([^     ]*\).*/\1/p' >libc.list
  $contains '^printf$' libc.list >/dev/null 2>&1; then
    echo done
elif $sed -n -e 's/^.*|FUNC |GLOB .*|//p' -e 's/^.*|FUNC |WEAK .*|//p' \
	   <libc.tmp >libc.list; \
  $contains '^printf$' libc.list >/dev/null 2>&1; then
    echo done
else
    nm -p $* 2>/dev/null >libc.tmp
    $sed -n -e 's/^.* [ATW]  *_[_.]*//p' -e 's/^.* [ATW] //p' <libc.tmp >libc.list
    if $contains '^printf$' libc.list >/dev/null 2>&1; then
	nm_opts='-p'
	echo "done"
    else
	echo " "
	echo "nm didn't seem to work right."
	echo "Trying ar instead..."
	if ar t $libc > libc.tmp; then
	    for thisname in $libnames; do
		ar t $thisname >>libc.tmp
	    done
	    $sed -e 's/\.o$//' < libc.tmp > libc.list
	    echo "Ok."
	else
	    echo "ar didn't seem to work right."
	    echo "Maybe this is a Cray...trying bld instead..."
    	    if $bld t $libc > /dev/null && bld t $libc | $sed -e 's/.*\///' -e 's/\.o:.*$//' > libc.list; then
		for thisname in $libnames; do
		    bld t $libnames | \
			$sed -e 's/.*\///' -e 's/\.o:.*$//' >>libc.list
		    ar t $thisname >>libc.tmp
		done
		echo "Ok."
	    else
		echo "bld didn't seem to work right either.  Desperation time."
		echo "We'll use strings and hope this returns something useful."
		if strings $libc > libc.list; then
		    echo "Yes; that seems to have worked."
		else 
		    echo "That didn't work either.  Giving up."
		    exit 1
		fi
	    fi
	fi
    fi
fi

: old version

inlibc='echo " ";
if $contains "^$1\$" libc.list >/dev/null 2>&1;
then echo "$1() found"; eval "$2=$define";
else echo "$1() not found"; eval "$2=$undef"; fi'

: : new version
: 
: inlibc='echo " "; td=$define; tu=$undef;
: if $contains "^$1\$" libc.list >/dev/null 2>&1;
: then echo "$1() found";
:   eval "case \"\$$2\" in undef) . whoa; esac"; eval "$2=\$td";
: else echo "$1() not found";
:   eval "case \"\$$2\" in define) . whoa; esac"; eval "$2=\$tu"; fi'
: 
: rmlist="$rmlist libc.tmp libc.list"
: 
: see how we invoke the C preprocessor
echo " "
echo "Now, how can we feed standard input to your C preprocessor..."
cat <<'EOT' >testcpp.c
#define ABC abc
#define XYZ xyz
ABC.XYZ
EOT
echo 'Maybe "'"$cc"' -E" will work...'
$cc -E <testcpp.c >testcpp.out 2>&1
: try to force gcc preprocessor if that is the compiler they are using
case $? in
0) cppstdin="$cc -E";;
*) case "$cc" in
    *gcc*)
	cd ..
	echo 'Trying (cat >/tmp/$$.c; '"$cc"' -E /tmp/$$.c; rm /tmp/$$.c)'
	echo 'cat >/tmp/$$.c; '"$cc"' -E /tmp/$$.c; rm /tmp/$$.c' >cppstdin
	chmod 755 cppstdin
	cppstdin=`pwd`/cppstdin
	cppminus='';
	cd UU
	$cppstdin <testcpp.c >testcpp.out 2>&1
	;;
    esac
    ;;
esac
if $contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
    echo "Yup, it does."
    cppstdin="$cc -E"
    cppminus='';
else
    echo 'Nope, maybe "'$cpp'" will work...'
    $cpp <testcpp.c >testcpp.out 2>&1
    if $contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	echo "Yup, it does."
	cppstdin="$cpp"
	cppminus='';
    else
	echo 'No such luck...maybe "'$cpp' -" will work...'
	$cpp - <testcpp.c >testcpp.out 2>&1
	if $contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
	    echo "It works!"
	    cppstdin="$cpp"
	    cppminus='-';
	else
	    echo 'Nixed again...maybe "'"$cc"' -E -" will work...'
	    $cc -E - <testcpp.c >testcpp.out 2>&1
	    if $contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
		echo "Hooray, it works!  I was beginning to wonder."
		cppstdin="$cc -E"
		cppminus='-';
	    else
		echo 'Nope...maybe "'"$cc"' -P" will work...'
		$cc -P <testcpp.c >testcpp.out 2>&1
		if $contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
		    echo "Yup, that does."
		    cppstdin="$cc -P"
		    cppminus='';
		else
		    echo 'Nope...maybe "'"$cc"' -P -" will work...'
		    $cc -P - <testcpp.c >testcpp.out 2>&1
		    if $contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
			echo "Yup, that does."
			cppstdin="$cc -P"
			cppminus='-';
		    else
			echo 'Hmm...perhaps you already told me...'
			case "$cppstdin" in
			'') ;;
			*) $cppstdin $cppminus <testcpp.c >testcpp.out 2>&1;;
			esac
			if $contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
			    echo "Hooray, you did!  I was beginning to wonder."
			else
			    echo 'Uh-uh.  Time to get fancy...'
			    cd ..
			    echo 'Trying (cat >/tmp/$$.c; '"$cc"' -E /tmp/$$.c; rm /tmp/$$.c)'
			    echo 'cat >/tmp/$$.c; '"$cc"' -E /tmp/$$.c; rm /tmp/$$.c' >cppstdin
			    chmod 755 cppstdin
			    cppstdin=`pwd`/cppstdin
			    cppminus='';
			    cd UU
			    $cppstdin <testcpp.c >testcpp.out 2>&1
			    if $contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
				echo "Eureka!."
			    else
				dflt=blurfl
				$echo $n "No dice.  I can't find a C preprocessor.  Name one: $c"
				rp='Name a C preprocessor:'
				. myread
				cppstdin="$ans"
				$cppstdin <testcpp.c >testcpp.out 2>&1
				if $contains 'abc.*xyz' testcpp.out >/dev/null 2>&1 ; then
				    echo "OK, that will do."
				else
				    echo "Sorry, I can't get that to work.  Go find one."
				    exit 1
				fi
			    fi
			fi
		    fi
		fi
	    fi
	fi
    fi
fi
rm -f testcpp.c testcpp.out

# Revision 1.1.1.1  1995/04/19  20:38:26  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:54  wfp5p
# Elm 2
#
: get C preprocessor symbols handy
echo " "
echo $attrlist | $tr ' ' '\012' >Cppsym.know
$cat <<EOSS >Cppsym
$startsh
case "\$1" in
-l) list=true
    shift
    ;;
esac
unknown=''
case "\$list\$#" in
1|2)
    for sym 
    do
	if $contains "^\$1$" Cppsym.true >/dev/null 2>&1; then
	    exit 0
	elif $contains "^\$1$" Cppsym.know >/dev/null 2>&1; then
		:
	else
	    unknown="\$unknown \$sym"
	fi
    done
    set X \$unknown
    shift
    ;;
esac
case \$# in
0) exit 1;;
esac
echo \$* | $tr ' ' '\012' | $sed -e 's/\(.*\)/\\
#ifdef \1\\
exit 0; _ _ _ _\1\\	 \1\\
#endif\\
/' >/tmp/Cppsym\$\$
echo exit 1 >>/tmp/Cppsym\$\$
$cppstdin $cppminus </tmp/Cppsym\$\$ >/tmp/Cppsym2\$\$
case "\$list" in
true) awk 'NF > 5 {print substr(\$6,2,100)}' </tmp/Cppsym2\$\$ ;;
*)
    sh /tmp/Cppsym2\$\$
    status=\$?
    ;;
esac
$rm -f /tmp/Cppsym\$\$ /tmp/Cppsym2\$\$
exit \$status
EOSS
chmod +x Cppsym
$eunicefix Cppsym
echo "Your C preprocessor defines the following symbols:"
Cppsym -l $attrlist >Cppsym.true
cat Cppsym.true
rmlist="$rmlist Cppsym Cppsym.know Cppsym.true"

# Revision 1.1.1.1  1995/04/19  20:38:26  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:56  wfp5p
# Elm 2
#
: check for broken toupper/tolower
$echo ' '
case "$d_broke_ctype" in
"$define") ;;
"$undef") ;;
*)
    $echo "Testing your \"ctype\" conversion routines..."
    d_broke_ctype="$define"
    $cat >try.c <<'EOF'
#include <stdio.h>
#include <ctype.h>
#define my_tolower(c)	(isupper(c) ? (c) - 'A' + 'a' : (c))
#define my_toupper(c)	(islower(c) ? (c) - 'a' + 'A' : (c))
main()
{
    int i;
    for (i = 1 ; i <= 0x7F ; ++i) {
	if (my_tolower(i) != tolower(i) || my_toupper(i) != toupper(i))
		exit(1);
    }
    exit(0);
}
EOF
    $cc $ccflags -o try try.c >/dev/null 2>&1 \
	&& ./try >/dev/null 2>&1 && d_broke_ctype="$undef"
    rm -f try.c try.o try core
    ;;
esac
case "$d_broke_ctype" in
"$define")	$echo "Using our own \"ctype\" conversions." ;;
"$undef")	$echo "Using standard system \"ctype\" conversions." ;;
esac


: check for broken fflush
$echo ' '
case "$d_broke_fflush" in
"$define") ;;
"$undef") ;;
*)
    $echo "Testing your \"fflush\" routine..."
    d_broke_fflush="$define"
    $cat >try.c <<'EOF'
#include <stdio.h>
main()
{
    FILE *fp;
    fp=fopen("/dev/null","r");
    fflush(fp);
    return ferror(fp);
}
EOF
    $cc $ccflags -o try try.c >/dev/null 2>&1 \
	&& ./try >/dev/null 2>&1 && d_broke_fflush="$undef"
    rm -f try.c try.o try core
    ;;
esac
case "$d_broke_fflush" in
"$define")	$echo "Your fflush is broken.  Adding -DULTRIX_FFLUSH_BUG."
		cflags="$cflags -DULTRIX_FFLUSH_BUG" ;;
"$undef")	$echo "Looks good." ;;
esac

# Revision 1.1.1.1  1995/04/19  20:38:26  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:53  wfp5p
# Elm 2
#
: see if chown can take -1 for mantaining the user/group unchanged
echo " "
 
case "$d_chown_neg1" in
undef)  dflt=n;;
*)  dflt=y;;
esac

$cat <<EOM

Does your system allow chown(-1, group) and chown(user, -1) to
not change the user or group respectively.  This is usually documented
in the chown manual page (man 2 chown). (Most POSIX and BSD systems can,
Xenix cannot)

EOM
rp="Does this system allow -1 as chown argument? [$dflt]"
$echo $n "$rp $c"
. myread
case "$ans" in
y*) d_chown_neg1="$define";;
*)  d_chown_neg1="$undef";;
esac
# Revision 1.1.1.1  1995/04/19  20:38:26  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:53  wfp5p
# Elm 2
#

case "$d_content" in
"$define") dflt=y;;
"$undef")  dflt=n;;
*)	   dflt=n;;
esac

$cat << EOM

Some modern Mail Transport Agents (mailers) support the Content-Length: header.
In doing so, they do not wish to have messages escaped to protect 'From ' lines
in the body of the message, among other strings.  Does the Mail Transport Agent
in use on this system honor the Content-Length: header?
EOM

echo " "
rp="Honors Content-Length: header? [$dflt]"
$echo $n "$rp $c"
. myread
case "$ans" in
y*) d_content="$define";;
*)  d_content="$undef";;
esac

# Revision 1.1.1.1  1995/04/19  20:38:26  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:54  wfp5p
# Elm 2
#
: see if crypt exists
echo " "
if $contains '^crypt$' libc.list >/dev/null 2>&1; then
    echo 'crypt() found.'
    d_crypt="$define"
    cryptlib=''
else
    cryptlib=`loc Slibcrypt.a "" $xlibpth`
    if $test -z "$cryptlib"; then
	cryptlib=`loc Mlibcrypt.a "" $xlibpth`
    else
	cryptlib=-lcrypt
    fi
    if $test -z "$cryptlib"; then
	cryptlib=`loc Llibcrypt.a "" $xlibpth`
    else
	cryptlib=-lcrypt
    fi
    if $test -z "$cryptlib"; then
	cryptlib=`loc libcrypt.a "" $libpth`
    else
	cryptlib=-lcrypt
    fi
#
#	now try for international versions?
#
    if $test -z "$cryptlib"; then
	cryptlib=`loc Slibcrypt_i.a "" $libpth`
	if $test -z "$cryptlib"; then
	    cryptlib=`loc Mlibcrypt_i.a "" $libpth`
	else
	    cryptlib=-lcrypt_i
	fi
	if $test -z "$cryptlib"; then
	    cryptlib=`loc Llibcrypt_i.a "" $libpth`
	else
	    cryptlib=-lcrypt_i
	fi
	if $test -z "$cryptlib"; then
	    cryptlib=`loc libcrypt_i.a "" $libpth`
	else
	    cryptlib=-lcrypt_i
	fi
    fi
    if $test -z "$cryptlib"; then
	echo 'crypt() not found.'
	d_crypt="$undef"
    else
	d_crypt="$define"
    fi
fi

# Revision 1.1.1.1  1995/04/19  20:38:26  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:54  wfp5p
# Elm 2
#
: check for cuserid function
set cuserid d_cuserid
eval $inlibc
# Revision 1.1.1.1  1995/04/19  20:38:26  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:54  wfp5p
# Elm 2
#

: determine if the host name should be displayed on the index page

case "$d_disphost" in
"$define") dflt=y;;
"$undef")  dflt=n;;
*)	dflt=n;;
esac
$cat <<EOM

Elm can either display the hostname on the index page, or just
the folder name.  If the hostname is displayed, the folder name
will read hostname:folder.  If not it will just read folder.

EOM
rp="Should Elm display the hostname as part of the folder name? [$dflt]"
$echo $n "$rp $c"
. myread
case "$ans" in
y*) d_disphost="$define";;
*)  d_disphost="$undef";;
esac


echo " "
if $contains flock libc.list >/dev/null 2>&1; then
    echo 'flock() found.'
    if $contains EWOULDBLOCK /usr/include/errno.h > /dev/null 2>&1; then
        has_flock="$define"
        echo 'flock locking available.'
    elif $contains EWOULDBLOCK /usr/include/sys/errno.h > /dev/null 2>&1; then
        has_flock="$define"
        echo 'flock locking available.'
    else
	has_flock="$undef"
        echo 'flock locking not available.'
	d_flock="$undef"
    fi
else
    has_flock="$undef"
    d_flock="$undef"
fi

if $contains F_SETLK /usr/include/sys/fcntl.h >/dev/null 2>&1; then
    echo 'F_SETLK found, fcntl locking available'
    has_fcntl="$define"
elif $contains F_SETLK /usr/include/sys/fcntlcom.h >/dev/null 2>&1; then
    echo 'F_SETLK found, fcntl locking available'
    has_fcntl="$define"
elif $contains F_SETLK /usr/include/sys/file.h >/dev/null 2>&1; then
    echo 'F_SETLK found, fcntl locking available'
    has_fcntl="$define"
elif $contains F_SETLK /usr/include/fcntl.h >/dev/null 2>&1; then
    echo 'F_SETLK found, fcntl locking available'
    has_fcntl="$define"
elif $contains F_SETLK /usr/include/fcntlbits.h >/dev/null 2>&1; then
    echo 'F_SETLK found, fcntl locking available'
    has_fcntl="$define"
elif $contains F_SETLK /usr/include/bits/fcntl.h >/dev/null 2>&1; then
    echo 'F_SETLK found, fcntl locking available'
    has_fcntl="$define"
else
    echo 'F_SETLK not found, fcntl locking not available'
    has_fcntl="$undef"
    d_fcntlock="$undef"
fi

if $test "$has_flock" = "$define" -o "$has_fcntl" = "$define"; then
    $cat <<EOM
Mail Transport Agents (sendmail, etc.) and Mail User Agents (Elm) can
use a variety of file locking protocols.  Based on your system type,
usage of a network, and MTA/MUAs in use, you may want to configure more
than one of the following Mail Locking Protocols.  It is recommended
that you use as many as are possible on your system to avoid problems.
All systems can support the dot locking method (.lock files).

Available locking protocols:
	dot locking (.lock)
EOM
    if $test "$has_flock" = "$define"; then
	echo '	flock style locking'
    fi

    if $test "$has_fcntl" = "$define"; then
	echo '	fcntl style locking'
    fi

    if $test "$has_flock" = "$define" -a "$has_fcntl" = "$define"; then
	$cat <<EOM
On some systems, flock style locking and fcntl style locking use the
same underlying calls so both are not only not necessary, but may
interfere with each other.  On other systems they are distinct and both
should be used.  You will have to consult the documentation for your
operating system to determine in which class your system resides.

EOM
    fi

    case "$d_dotlock" in
    "$define")	dflt=y;;
    "$undef")	dflt=n;;
    *)		dflt=y;;
    esac

    rp="Would you like to use dot lock style mail spool locking? [$dflt]"
    $echo $n "$rp $c"
    . myread
    case "$ans" in
    y*) d_dotlock="$define";;
    *)  d_dotlock="$undef";;
    esac

    if $test "$has_flock" = "$define"; then
	case "$d_flock" in
	"$define")	dflt=y;;
	"$undef")	dflt=n;;
	*)		dflt=y;;
	esac 
    
    if $test "$uname_os" = "AIX" ; then
        dflt=n
    fi

	rp="Would you like to use flock style mail spool locking? [$dflt]"
	$echo $n "$rp $c"
	. myread
	case "$ans" in
	y*) d_flock="$define";;
	*)  d_flock="$undef";;
	esac
    fi

    if $test "$has_fcntl" = "$define"; then
	case "$d_fcntlock" in
	"$define")	dflt=y;;
	"$undef")	dflt=n;;
	*)		dflt=y;;
	esac

	rp="Would you like to use fcntl style mail spool locking? [$dflt]"
	$echo $n "$rp $c"
	. myread
	case "$ans" in
	y*) d_fcntlock="$define";;
	*)  d_fcntlock="$undef";;
	esac
    fi
else
    d_dotlock="$define"
    echo 'Dot lock style locking will be used'
fi

if $test -d /usr/spool/locks ; then
    lock_dir=/usr/spool/locks
elif $test -d /usr/spool/uucp ; then
    lock_dir=/usr/spool/uucp
elif $test -d /var/spool/locks ; then
    lock_dir=/var/spool/locks
elif $test -d /var/spool/lock ; then
    lock_dir=/var/spool/lock
elif $test -d /var/spool/uucp ; then
    lock_dir=/var/spool/uucp
else
    lock_dir=/tmp
fi
echo " "
echo "Non-mailbox locks will use the $lock_dir directory"
echo " "

# Revision 1.1.1.1  1995/04/19  20:38:27  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:54  wfp5p
# Elm 2
#
: now get the host name
if $test "$autohostname" != "$undef" -o "$hostname" = "" ; then
    autohostname="$define"
    echo " "
    echo "Figuring out host name..."
    echo 'Maybe "hostname" will work...'
    if ans=`sh -c hostname 2>&1` ; then
	hostname=$ans
	phostname=hostname
    else
	if xenix; then
	    echo 'Oh, dear.  Maybe "/etc/systemid" is the key...'
	    if ans=`cat /etc/systemid 2>&1` ; then
		hostname=$ans
		phostname='cat /etc/systemid'
		echo "Whadyaknow.  Xenix always was a bit strange..."
	    else
		echo 'No, maybe "uuname -l" will work...'
		if ans=`sh -c '$uuname -l' 2>&1` ; then
		    hostname=$ans
		    phostname='$uuname -l'
		else
		    echo 'Strange.  Maybe "uname -n" will work...'
		    if ans=`sh -c '$uname -n' 2>&1` ; then
			hostname=$ans
			phostname='$uname -n'
		    else
			echo 'Oh well, maybe I can mine it out of whoami.h...'
			if ans=`sh -c $contains' sysname /usr/include/whoami.h' 2>&1` ; then
			    hostname=`echo "$ans" | $sed 's/^.*"\(.*\)"/\1/'`
			    phostname="sed -n -e '"'/sysname/s/^.*\"\\(.*\\)\"/\1/{'"' -e p -e q -e '}' </usr/include/whoami.h"
			else
			    case "$hostname" in
			    '') echo "Does this machine have an identity crisis or something?"
				phostname=''
				;;
			    *)  echo "Well, you said $hostname before...";;
			    esac
			fi
		    fi
		fi
	    fi
	else
	    if $test -r /etc/systemid ; then
		echo "What is a non-Xenix system doing with /etc/systemid?"
	    fi
	    echo 'No, maybe "uuname -l" will work...'
	    if $test -n "$uuname" && ans=`sh -c "$uuname -l" 2>&1` ; then
		hostname=$ans
		phostname="$uuname -l"
	    else
		echo 'Strange.  Maybe "uname -n" will work...'
		if $test -n "$uname" && ans=`sh -c "$uname -n" 2>&1` ; then
		    hostname=$ans
		    phostname="$uname -n"
		else
		    if ans=`cat /etc/systemid 2>&1` ; then
			hostname=$ans
			phostname='cat /etc/systemid'
			echo "Well, I'll use the systemid file anyway..."
		    else
			echo 'Oh well, maybe I can mine it out of whoami.h...'
			if ans=`sh -c $contains' sysname /usr/include/whoami.h' 2>&1` ; then
			    hostname=`echo "$ans" | $sed 's/^.*"\(.*\)"/\1/'`
			    phostname="sed -n -e '"'/sysname/s/^.*\"\\(.*\\)\"/\1/{'"' -e p -e q -e '}' </usr/include/whoami.h"
			else
			    case "$hostname" in
			    '') echo "Does this machine have an identity crisis or something?"
				phostname=''
				;;
			    *)  echo "Well, you said $hostname before...";;
			    esac
			fi
		    fi
		fi
	    fi
	fi
    fi
else
    echo "Last time you said the hostname was $hostname"
fi
: you do not want to know about this
set $hostname
hostname=$1

: translate upper to lower if necessary
case "$hostname" in
    *[A-Z]*)
	hostname=`echo $hostname | tr '[A-Z]' '[a-z]'`
	echo "(Normalizing case in your host name)"
	;;
esac

: verify guess
if $test "$hostname" ; then
    dflt=y
    echo 'Your host name appears to be "'$hostname'".'
    $echo $n "Is this correct? [$dflt] $c"
    rp="Sitename is $hostname? [$dflt]"
    . myread
    case "$ans" in
      y*)  ;;
      *)      hostname='' ;;
    esac
fi

: bad guess or no guess
while $test "X$hostname" = X ; do
    dflt=''
    rp="Please type the (one word) name of your host:"
    $echo $n "$rp $c"
    . myread
    hostname="$ans"
    autohostname="$undef"
done

echo " "
case "$hostname" in
*.*)
    dflt=`$expr "X$hostname" : "X[^.]*\(\..*\)"`
    hostname=`$expr "X$hostname" : "X\([^.]*\)\."`
    echo "(Trimming domain name from host name--host name is now $hostname)"
    ;;
*)  case "$mydomain" in
	'') dflt='.UUCP';;
	*) dflt="$mydomain";;
    esac
    ;;
esac
rp="What is your domain name? [$dflt]"
$echo $n "$rp $c"
. myread
case "$ans" in
'') ;;
.*) ;;
*) ans=".$ans";;
esac
mydomain="$ans"

: a little sanity check here
case "$phostname" in
'') ;;
*)  case `$phostname` in
    $hostname$mydomain|$hostname) ;;
    *)
	case "$phostname" in
	sed*)
	    echo "(That doesn't agree with your whoami.h file, by the way.)"
	    ;;
	*)
	    echo "(That doesn't agree with your $phostname command, by the way.)"
	    ;;
	esac
	phostname=''
	;;
    esac
    ;;
esac

: see if there is a whoami file
echo " "
if $test -r /usr/include/whoami.h ; then
    d_whoami="$define"
    echo "whoami.h found."
else
    d_whoami="$undef"
fi

# Revision 1.1.1.1  1995/04/19  20:38:26  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:54  wfp5p
# Elm 2
#
: see how we will look up host name
echo " "
d_douname="$undef"
d_gethname="$undef"

if $contains '^gethostname$' libc.list >/dev/null 2>&1 ; then
    echo "gethostname() found."
    d_gethname="$define"
    ans=gethostname
elif xenix; then
    if $test -n "$uname"; then
	u_name=`$uname -n`
    else
	u_name=
    fi
    if $test -n "$line"; then
	if $test -r /etc/systemid; then
	    s_name=`$line < /etc/systemid`
	else
	    s_name=
	fi
    else
	s_name=
    fi
    if $test -n "$u_name"; then
	if $test "$u_name" = "$s_name"; then
	    cat <<EOM
On Xenix, UUCP uses the name found in /etc/systemid, while uname()
returns the name compiled into the operating system via configure.
Elm needs the UUCP name, and currently these two match.  However, they
need not match.  Be sure to always keep these two names in sync.
Since they match, Elm will not consider that the Xenix uname function
is broken.  However, if you are not always able to make them
match, answer the compile in hostname question Yes.
EOM
	    if $contains '^uname$' libc.list >/dev/null 2>&1 ; then
		echo "uname() found."
		d_douname="$define"
		ans=uname
	    fi
	else
	    cat <<EOM
On Xenix, UUCP uses the name found in /etc/systemid, while uname()
returns the name compiled into the operating system via configure.
Your /etc/systemid file contains $s_name.
But uname returns $u_name.
Since Elm needs the UUCP name, and currently these two do not match,
Elm will assume Xenix uname() is broken.
EOM
	fi
    else
	cat <<EOM
On Xenix, UUCP uses the name found in /etc/systemid, while uname()
returns the name compiled into the operating system via configure.
Elm needs the UUCP name, and currently the compiled in name is undefined.
Since mail needs the UUCP name, and these two need not match, Elm will
assume Xenix uname() is broken.
EOM
    fi
elif $contains '^uname$' libc.list >/dev/null 2>&1 ; then
    echo "uname() found."
    d_douname="$define"
    ans=uname
fi

case "$d_douname$d_gethname" in
*define*)
    case "$ign_hname" in
    '')	case "$d_host_comp" in
	"$define") dflt=y;;
	*)  dflt=n;;
	esac;;
    y)  dflt=y;;
    *)  dflt=n;;
    esac
    cat <<EOM
 
Every now and then someone has a $ans() that lies about the hostname
but can't be fixed for political or economic reasons.  Would you like to
EOM
    rp="pretend $ans() isn't there and maybe compile in the hostname? [$dflt]"
    $echo $n "$rp $c"
    . myread
    case "$ans" in
    y*) ign_hname=y
	d_douname="$undef"
	d_gethname="$undef"
	d_host_comp="$define"
	$echo $n "Okay... $c"
	;;
    *)	ign_hname=n
	d_host_comp="$undef"
	;;
    esac
    ;;
*)
    $cat <<EOT
 
There is no gethostname() or uname() on this system.  The hostname will
have to be compiled in.  It can be overridden in the global elm.rc file
in the library directory to specify hostname, hostfullname and hostdomain.
EOT
    d_host_comp="$define"
    ;;
esac

: see if errlst.o is in the lib.
echo " "
case "$d_errlst" in
"$define") dflt=y;;
"$undef")  dflt=n;;
*)	   if $contains '^errlst$' libc.list >/dev/null 2>&1 ; then
		echo "errlst object found, will attempt to use systems"
		echo "sys_nerr and sys_errlist"
		dflt=y
	    elif $contains '^sys_errlist$' libc.list >/dev/null 2>&1 ; then
		echo "sys_errlist found, will attempt to use systems"
		echo "sys_nerr and sys_errlist"
		dflt=y
	    else
		echo "neither errlst object nor sys_errlist found, $package will use its own"
		dflt=n
	    fi;;
esac

cat <<EOM

Elm would like to use the systems definitions of the error messages for system
errors.  These are usually contained in the global variables sys_errlist[] and
sys_nerr.  If these do not exist, there is a standard list built into Elm.

EOM

rp="Does the system support the sys_errlist[] global variable? [$dflt]"
$echo $n "$rp $c"
. myread
case "$ans" in
    y*) d_errlst="$define";;
    *)  d_errlst="$undef" ;;
esac

: see if fsync exists
set fsync d_fsync
eval $inlibc
: see if fstruncate exists
set ftruncate d_ftruncate
eval $inlibc
: see if getopt exists
set getopt d_getopt
eval $inlibc

: see if strings.h is in /usr/include or /usr/include/sys
echo " "
strings=`loc string.h "" /usr/include $includepath`
if $test -z "$strings"; then
	strings=`loc strings.h "" /usr/include $includepath`
fi
while $test -z "$strings"; do
	echo " "
	dflt=''
	rp="What is the full path name of the include file directory? []"
	$echo $n "$rp $c"
	. myread
	includepath=`filexp $ans`
	if $test -d "$includepath"; then
		strings=`loc string.h "" /usr/include $includepath`
		if $test -z "$strings"; then
			strings=`loc strings.h "" /usr/include $includepath`
		fi
		if $test -z "$strings"; then
			$cat <<EOM

Include file string.h or strings.h not found in $includepath.
Elm requires string.h on USG type systems or strings.h on BSD type
systems.  Please specify the directory where one of these files can
be found.
EOM
		fi
	else
		echo "Directory $includepath not found"
	fi
done

strings_f=`$expr "$strings" : ".*/\(.*\)"`
if $test "$strings_f" = "string.h"; then
	d_strings="$undef"
	echo "Using string.h instead of strings.h"
else
	d_strings="$define"
	echo "Using strings.h instead of string.h"
fi
pwdinsys=`loc pwd.h "" /usr/include $includepath`
if $test -z "$pwdinsys"; then
	d_pwdinsys="$define"
else
	d_pwdinsys="$undef"
fi

# Revision 1.1.1.1  1995/04/19  20:38:26  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:55  wfp5p
# Elm 2
#
: index or strcpy
echo " "
case "$d_index" in
"$define") dflt=n;;
*) dflt=y;;
esac
if $contains '^index$' libc.list >/dev/null 2>&1 ; then
    if $contains '^strchr$' libc.list >/dev/null 2>&1 ; then
	if $contains strchr "$strings" >/dev/null 2>&1 ; then
	    if $contains index "$strings" >/dev/null 2>&1 ; then
#			has index, strchr, and index and strchr in strings.h
		echo "Your system has both index() and strchr().  Shall I use"
		rp="index() rather than strchr()? [$dflt]"
		$echo $n "$rp $c"
		. myread
		case "$ans" in
		    n*) d_index="$define" ;;
		    *)  d_index="$undef" ;;
		esac
	    else
#			has index, strchr, and strchr in strings.h
		d_index="$define"
	        echo "strchr() found."
	    fi
	else
#			has index, strchr, and no strchr in strings.h
	    d_index="$undef"
	    echo "index() found."
	fi
    else
#			has only index, no strchr, strings.h is a moot point
	d_index="$undef"
	echo "index() found."
    fi
else
    if $contains '^strchr$' libc.list >/dev/null 2>&1 ; then
	d_index="$define"
	echo "strchr() found."
    else
	echo "No index() or strchr() found!"
	d_index="$undef"
    fi
fi

# Revision 1.1.1.1  1995/04/19  20:38:27  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:54  wfp5p
# Elm 2
#
case "$d_mmdf" in
"$define") dflt=y;;
"$undef")  dflt=n;;
*)	if $test -f "$submit"; then
	    dflt=y
	else
	    dflt=n
	fi
	;;
esac
$cat <<EOM
 
Some systems run MMDF as their Mail Transport Agent.  MMDF uses a
different way of delimiting messages in the mailbox files.  Other
systems don't run MMDF but use the MMDF separator in their mailbox
files.  The MMDF separator is usually a series of four Control A's.
$package needs to know if this system uses the MMDF style message
separator in its mailbox files.

EOM
rp="Does this system use MMDF style message separator? [$dflt]"
$echo $n "$rp $c"
. myread
case "$ans" in
y*) d_mmdf="$define";;
*)  d_mmdf="$undef";;
esac

# Revision 1.1.1.1  1995/04/19  20:38:28  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:55  wfp5p
# Elm 2
#
: determine mail delivery agent for Elm to use
case "$mailer" in
'')
    if $test "$d_mmdf" = "$define" -a -f "$execmail"; then
 	dflt="$execmail"
    elif $test "$d_mmdf" = "$define" -a -f "$submit"; then
	dflt="$submit"
    elif $test -f "$sendmail"; then
	dflt="$sendmail"
    elif $test -f "$rmail"; then
	dflt="$rmail"
    elif $test -f /bin/mail; then
	dflt=/bin/mail
    else
	dflt=$mail
    fi
    ;;
*)  dflt="$mailer";;
esac
cont=true
while $test "$cont" ; do
    echo " "
    echo "Give the full path name of the program used to deliver mail on your"
    $echo $n "system: [$dflt] $c"
    rp="Preferred mail delivery agent: [$dflt]"
    . myread
    mailer="$ans"
    if $test -f "$ans"; then
	cont=''
    else
	if $test "$fastread" = yes; then
	    dflt=y
	else
	    dflt=n
	fi
	echo "Mail delivery agent $ans doesn't exist."
	rp="Use that name anyway? [$dflt]"
	$echo $n "$rp $c"
	. myread
	dflt=''
	case "$ans" in
	y*) cont='';;
	esac
    fi
done
if $test "$mailer" != "$sendmail"; then
    sendmail=''
fi
if $test "$mailer" != "$submit"; then
    submit=''
fi
if $test "$mailer" != "$execmail"; then
    execmail=''
fi

# Revision 1.1.1.1  1995/04/19  20:38:26  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:55  wfp5p
# Elm 2
#
: check for internet mailer
case "$d_internet" in
"$define")	dflt=y;;
"$undef")	dflt=n;;
*)	if $test -f "$sendmail"; then
	    dflt=y
	elif $test -f "$submit"; then
	    dflt=y
	elif $test -f "$smail"; then
	    dflt=y
	else
	    dflt=n
	fi
	;;
esac
$cat <<EOM
 
Some newer mailers can deliver mail to addresses of the INTERNET
persuasion, such as user@host.domain.  Other older mailers require the
complete uucp ! path to the destination to be specified in the address.
EOM
rp="Does your mailer understand INTERNET addresses? [$dflt]"
$echo $n "$rp $c"
. myread
case "$ans" in
y*) d_internet="$define";;
*)  d_internet="$undef";;
esac

# Revision 1.1.1.1  1995/04/19  20:38:26  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:54  wfp5p
# Elm 2
#
: check for ispell spelling checker
case "$d_ispell" in
"$define")	dflt=y
		dflt_path=$ispell_path
		dflt_options=$ispell_options
		;;
"$undef")	dflt=n
		dflt_path=
		dflt_options=
		;;
*)	if $test -n "$ispell" -a "$ispell" != "ispell"; then
	    dflt=y
	    dflt_path=$ispell
	    dflt_options='-x'
	else
	    dflt=n
	    dflt_path=
	    dflt_options=
	fi
	;;
esac
$cat <<EOM
 
Elm has the ability to place a call to the GNU ispell spelling checker
on its post-message-entry/pre-message-send menu.
EOM
if $test -n "$dflt_path"; then
	$echo "Configure has found ispell as $dflt_path"
else
	$echo "Configure was unable to find ispell"
fi

$echo $n "Should Elm add the ispell option to the pre-send menu? [$dflt] $c"
rp="Should Elm add the ispell option to the pre-send menu? [$dflt]"
. myread
case "$ans" in
y*) d_ispell="$define";;
*)  d_ispell="$undef";;
esac

case "$d_ispell" in
"$undef")	ispell_path=
		;;
"$define")	cont=true
		dflt=$dflt_path
		while $test "$cont" ; do
		    echo " "
		    echo "Give the name of the ispell program on your"
		    $echo $n "system: [$dflt] $c"
		    rp="Ispell path name: [$dflt]"
		    . myread
		    ispell_path=$ans;
		    if $test -f "$ans"; then
			cont=''
		    else
			lookup=`loc "$ans" "" . $pth`
			if $test -f "$lookup"; then
			    cont=''
			    ispell_path=$lookup
			else
			    if $test "$fastread" = yes; then
				dflt=y
			    else
				dflt=n
			    fi
			    echo "spelling program $ans doesn't exist."
			    rp="Use that name anyway? [$dflt]"
			    $echo $n "$rp $c"
			    . myread
			    dflt=''
			    case "$ans" in
				y*) cont='';;
			    esac
			fi
		    fi
		done

		dflt=$dflt_options
		$echo $n "What options should Elm use with $ispell_path: [$dflt] $c"
		rp="$ispell_path options: [$dflt]"
		. myread
		ispell_options=$ans;
		case "$ispell_options" in
		'none') ispell_options=''
		     ;;
		esac
		;;
esac
: see if locale.h is in /usr/include
echo " "
dflt=`loc locale.h "" /usr/include $includepath`
if $test -z "$dflt"; then
	echo "locale.h not found, $package will not call setlocale"
	d_locale=$undef
else
	echo "locale.h found, $package will call setlocale"
	d_locale=$define
fi

: see if nl_types.h is in /usr/include
echo " "
dflt=`loc nl_types.h "" /usr/include $includepath`
if $test -z "$dflt"; then
	echo "nl_types.h not found, $package will use its own"
	d_nl_types=$undef
else
	echo "nl_types.h found, $package will include the systems version"
	d_nl_types=$define
fi

: see if catgets is in the libraries
set catgets d_msgcat
eval $inlibc

if $test "$d_msgcat" = "$define"; then
	echo "Message catalog routines found"
	cat <<EOM

The system has the message catalog routines in its library.  These routines
are new, and on some systems do not function properly. Also, $package expects
that these routines are X/Open compliant.

EOM

	case "$d_usenls" in
	"$define") dflt=y;;
	"$undef")  dflt=n;;
	*)	   dflt=n;;
	esac

	rp="Should $package use its own routines instead of the systems NLS routines? [$dflt]"
	$echo $n "$rp $c"
	. myread
	case "$ans" in
	    y*) d_usenls="$define"
		d_nl_types=$undef;;
	    *)  d_usenls="$undef";;
	esac
else
	echo "Message catalog routines not found, $package will use its own"
	if $test "$d_usenls" = ""; then
		d_usenls="$define"
	fi
fi

# Revision 1.1.1.1  1995/04/19  20:38:27  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:55  wfp5p
# Elm 2
#
case "$d_mboxedit" in
"$define") dflt=y;;
"$undef")  dflt=n;;
*)	dflt=n;;
esac
$cat <<EOM
 
A lot of sites that install the Elm Mail System find that the function
E)dit mailbox from within Elm is dangerous and confusing.  If you choose,
you can instead disable that function, with the program being slightly
smaller and presenting an appropriate error message to the user if they
try to E)dit their mailbox.

EOM
rp="Would you like to enable the E)dit Mailbox function? [$dflt]"
$echo $n "$rp $c"
. myread
case "$ans" in
y*) d_mboxedit="$define";;
*)  d_mboxedit="$undef";;
esac

: see if memcpy exists
set memcpy d_memcpy
eval $inlibc

# Revision 1.4  1996/05/09  15:50:34  wfp5p
# Alpha 10
#
# Revision 1.3  1996/03/13  14:37:52  wfp5p
# Alpha 9 before Chip's big changes
#
# Revision 1.1.1.1  1995/04/19  20:38:27  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:54  wfp5p
# Elm 2
#
: determine whether MIME messages should be passed to metamail
: also select default sending and display charcter sets


$cat <<EOM

Elm supports the RFC-1521 Multipurpose Internet Mail Extensions (MIME).
MIME allows you to use international character sets (not just US-ASCII)
in mail messages.  MIME also allows multiple objects (binaries,
graphics, audio, video, PostScript, spreadsheets -- whatever!) to be
attached to mail messages.  MIME does not require a graphic display,
but some of its neatest capabilities demand one.

Elm generates MIME messages on its own.  To handle incoming MIME
messages, however, you need to install Nathaniel Borenstein's "metamail"
package on your system.  The most recent version of "metamail" is
distributed from thumper.bellcore.com [128.96.41.1].  Additional
distribution points are available; consult an "archie" server.

You may choose to have Elm pass received MIME messages to "metamail".
Otherwise, if you do not have "metamail" (or you elect not to use
it), Elm can ignore the MIME attributes and display the message as-is.

EOM

case "$d_mime" in
"$undef")
	dflt=n
	;;
"$define")
	dflt=y
	;;
*)
	if $test -f "$metamail" ; then
		$echo "It appears that you have \"$metamail\" installed."
		dflt=y
	else
		$echo "I do not see \"metamail\" on this system."
		dflt=n
	fi
	$echo ""
	;;
esac

rp="Should Elm pass incoming MIME messages to \"metamail\"? [$dflt]"
$echo $n "$rp $c"
. myread
case "$ans" in
y*) d_mime="$define";;
*)  d_mime="$undef";;
esac

cat <<EOM

When composing outbound mail messages, Elm checks whether there are
any 8-bit "international" characters in the message.  If not, the
message is labelled as "us-ascii".  If there are, Elm needs to specify
the character set for the message.  What international character set
do people on your system most commonly use?  "iso-8859-1" is a common
selection, and is appropriate for many European languages.  (The choice
you make here becomes the system default.  Users that want a different
choice may set an "elmrc" value.)

EOM

case "$defcharset" in
'') defcharset="iso-8859-1";;
esac
dflt="$defcharset"

rp="Default for sending messages sent with int'l chars? [$dflt]"
$echo $n "$rp $c"
. myread
defcharset="$ans"

case "$defdispcharset" in
'') defdispcharset="$defcharset";;
esac

if $test "$d_mime" = "$define"; then

	dflt="$defdispcharset"
	$cat <<EOM

When a message is received, Elm needs to know whether the terminal
can display the characters in the message, or if it needs to start up
"metamail".  What character set does your terminals most commonly
handle?  "iso-8859-1" is a common selection, and is appropriate for
many European languages.  (Even VT-100 text terminals can do this.)
If your displays have no capability whatsoever, then select "us-ascii".
(The choice you make here becomes the system default.  Users that want
a different choice may set an "elmrc" value.)

EOM
	rp="Default character set which could be displayed? [$dflt]"
	$echo $n "$rp $c"
	. myread
	defdispcharset="$ans"

fi

: see if mkdir exists
set mkdir d_mkdir
eval $inlibc

# Revision 1.1.1.1  1995/04/19  20:38:27  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:55  wfp5p
# Elm 2
#
: ask about newmail running in the background automatically
case "$d_newauto" in
"$define")	dflt=y;;
"$undef")	dflt=n;;
*)		dflt=y;;
esac
$cat <<EOM

Newmail (Elm's utility to check for incoming mail) can be configured to
either run as a foreground process or as a process that automatically
forks and runs in the background.

EOM
rp="Should newmail automatically run in the background? [$dflt]"
$echo $n "$rp $c"
. myread
case "$ans" in
y*) d_newauto="$define";;
*)  d_newauto="$undef";;
esac

# Revision 1.1.1.1  1995/04/19  20:38:27  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:54  wfp5p
# Elm 2
#

if $test -f "$sendmail"; then
	echo "You're running sendmail.  Setting noaddfrom, usedomain"
	d_noaddfrom="$define"
	d_usedomain="$undef"
elif $test -f "$submit"; then
	echo "You're running submit with MMDF.  Setting noaddfrom, usedomain"
	d_noaddfrom="$undef"
	d_usedomain="$define"
elif $test -f "$execmail" -a "$d_mmdf" = "$define"; then
	echo "You're running execmail with MMDF.  Setting noaddfrom, usedomain"
	d_noaddfrom="$undef"
	d_usedomain="$undef"
else
	if $test "$d_internet" = "$define"; then
		case "$d_usedomain" in
		"$define") dflt=y;;
		"$undef")  dflt=n;;
		*)	   dflt=y;;
		esac

		$cat <<EOM

Are you running a machine where you want to have a domain name appended
to the hostname on outbound mail?
EOM
		echo " "
		rp="Would you like the domain name appended? [$dflt]"
		$echo $n "$rp $c"
		. myread
		case "$ans" in
		y*) d_usedomain="$define";;
		*)  d_usedomain="$undef";;
		esac
	else
		d_usedomain="$undef"
		$cat <<EOM

Since your mailer does not understand internet addresses, I'm undefining
usedomain so your domain name will not be appended to the hostname on
outbound mail.

EOM
	fi

	case "$d_noaddfrom" in
	"$define") dflt=y;;
	"$undef")  dflt=n;;
	*)	   dflt=n;;
	esac
	echo " "
	rp="Does your mailer add the From: header for you? [$dflt]"
	$echo $n "$rp $c"
	. myread
	case "$ans" in
	y*) d_noaddfrom="$define";;
	*)  d_noaddfrom="$undef";;
	esac
fi

# Revision 1.1.1.1  1995/04/19  20:38:27  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:55  wfp5p
# Elm 2
#
case "$d_noxheader" in
"$define") dflt=y;;
"$undef")  dflt=n;;
*)	dflt=n;;
esac
$cat <<EOM
 
Some sites do not like to see the mail header "X-mailer:" in outgoing
messages.  If you choose, you may disable these headers.  However, it
is strongly urged to leave these headers in the mail to assist in
tracking down problems.

EOM
rp="Would you like to disable the X-mailer: headers? [$dflt]"
$echo $n "$rp $c"
. myread
case "$ans" in
y*) d_noxheader="$define";;
*)  d_noxheader="$undef";;
esac

# Revision 1.1.1.1  1995/04/19  20:38:27  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:55  wfp5p
# Elm 2
#
: check for "kill(pid, 0)"
echo " "
case "$d_pidcheck" in
"$define")	;;
"$undef")	;;
*)
	    echo "Checking to see if kill(pid, 0) works..."
	    $cat >try.c <<'EOCP'
main()
	{
	int	pid, status0, status9;

	if ((pid = fork()) == 0)
		{
		sleep(30);
		exit(1);
		}
	status0 = kill(pid, 0);
	status9 = kill(pid, 9);
	exit(status0 == status9);
	}
EOCP
	    if $cc try.c -o try >/dev/null 2>&1 ; then
		if try >/dev/null 2>&1 ; then
		    echo "Your system does not support kill(pid, 0)..."
		    d_pidcheck="$undef"
		else
		    d_pidcheck="$define"
		    echo "Your system supports kill(pid, 0)..."
		fi
	    else
		echo "Your system does not support kill(pid, 0)..."
		d_pidcheck="$undef"
	    fi
	    $rm -f try.c try.o try
	;;
esac

: see if /usr/include/sys/ptem.h exists, making it a possible System V/386
d_ptem="$undef"
if usg ; then
    echo " "
    echo "Checking to see if your system has sys/ptem.h..."
    if $test -f /usr/include/sys/ptem.h ; then
        echo "Yep, it does..."
        if "$contains" "struct winsize" /usr/include/sys/ptem.h >/dev/null 2>&1 ; then
	    d_ptem="$define"
	    echo "  and it has the needed structure."
	fi
    fi
fi

# Revision 1.1.1.1  1995/04/19  20:38:27  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:55  wfp5p
# Elm 2
#
: see if there is a putenv
set putenv d_putenv
eval $inlibc

# Revision 1.2  1995/05/30  18:15:57  wfp5p
# Change to Configure to work correctly in "fastread" mode.
#
# Revision 1.1.1.1  1995/04/19  20:38:27  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:54  wfp5p
# Elm 2
#
: get remove at last flag and number of lock attempts
$cat <<EOM

The next pair of questions have to do with what to do when another
program has locked a mailbox...

First, how many times should the Elm check for the removal of the lock
file before giving up?
EOM

case "$maxattempts" in
    '') dflt=6;;
    *)  dflt=$maxattempts;;
esac
cont=true
while $test "$cont" ; do
    echo " "
    rp="Number of lock attempts: [$dflt]"
    $echo $n "$rp $c"
    . myread
    maxattempts="$ans"
    if $test "$maxattempts" -lt 3 -o "$maxattempts" -gt 10 ; then
	echo "The recommended range is 3-10"
	odflt=$dflt
        if $test "$fastread" = yes; then
	   dflt=y
	else
	   dflt=n
	fi
	rp="Should I use your answer of $maxattempts lock attempts anyway? [$dflt]"
	$echo $n "$rp $c"
	. myread
	dflt=$odflt
	case "$ans" in
	y*) cont='';;
	esac
    else
	cont=''
    fi
done

case "$d_remlock" in
"$define") dflt=y;;
"$undef")  dflt=n;;
*)	   dflt=n;;
esac
echo " "
rp="Should it REMOVE the lock file after $maxattempts checks? [$dflt]"
$echo $n "$rp $c"
. myread
case "$ans" in
y*) d_remlock="$define";;
*)  d_remlock="$undef";;
esac

: see if rename exists
set rename d_rename
eval $inlibc

: see if setegid exists
set setegid d_setegid
eval $inlibc
# Revision 1.1.1.1  1995/04/19  20:38:27  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:55  wfp5p
# Elm 2
#
: see if BSD sigset exists
echo " "
set sigset d_sigset
eval $inlibc
: See if sigaction exists -- POSIX has highest priority in match
if $contains sigaction libc.list >/dev/null 2>&1; then
    echo "sigaction() found."
    d_sigaction="$define"
    d_sigset="$undef"
    d_sigvec="$undef"
    d_sigvectr="$undef"
else
    d_sigaction="$undef"
: see if sigvector exists -- since sigvec will match the substring
    if $contains sigvector libc.list >/dev/null 2>&1; then
        echo 'sigvector() found--you must be running HP-UX.'
        d_sigvectr="$define"
        d_sigvec="$define"
    else
: try the original name
        d_sigvectr="$undef"
        if $contains sigvec libc.list >/dev/null 2>&1; then
	    echo 'sigvec() found.'
	    d_sigvec="$define"
        else
	    case "$d_sigset" in
	    "$define")
               echo 'sigvec() not found';;
	    *)
               echo 'sigvec() not found--race conditions with signals may occur.';;
	    esac
            d_sigvec="$undef"
        fi
    fi
fi

: see if sigprocmask exists -- POSIX has highest priority in match
echo " "
if $contains sigprocmask libc.list >/dev/null 2>&1; then
    echo 'sigprocmask() found.'
    d_sigprocmask="$define"
    d_sigblock="$undef"
    d_sighold="$undef"
else
    d_sigprocmask="$undef"
: see if sigblock exists
    if $contains sigblock libc.list >/dev/null 2>&1; then
	echo 'sigblock() found.'
	d_sigblock="$define"
	d_sighold="$undef"
    else
: see if sighold exists
	d_sigblock="$undef"
	if $contains sighold libc.list >/dev/null 2>&1; then
	    echo 'sighold() found.'
	    d_sighold="$define"
	else
	    echo 'No signal masking functions found.'
	    d_sighold="$undef"
	fi
    fi
fi

case "$d_statuschg" in
"$define") dflt=y;;
"$undef")  dflt=n;;
*)	dflt=n;;
esac
$cat <<EOM
 
Some sites that install the Elm Mail System may not wish to enable the
S)tatus Change function, which permits users to change the status of
their messages arbitrarily from within Elm.  If you choose, you can
instead disable that function, with the program being slightly smaller
and presenting an appropriate error message to users if they try to
invoke S)tatus Change to alter the status of their messages.

EOM
rp="Would you like to enable the S)tatus Change function? [$dflt]"
$echo $n "$rp $c"
. myread
case "$ans" in
y*) d_statuschg="$define";;
*)  d_statuschg="$undef";;
esac

: see if strspn exists
set strspn d_strspn
eval $inlibc

: see if strcspn exists
set strcspn d_strcspn
eval $inlibc

: see if strpbrk exists
set strpbrk d_strpbrk
eval $inlibc

# Revision 1.1.1.1  1995/04/19  20:38:27  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:56  wfp5p
# Elm 2
#
: see if there is a strerror
set strerror d_strerror
eval $inlibc

# Revision 1.1.1.1  1995/04/19  20:38:27  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:56  wfp5p
# Elm 2
#
: see if there is a strftime
set strftime d_strftime
eval $inlibc

# Revision 1.1.1.1  1995/04/19  20:38:27  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:55  wfp5p
# Elm 2
#
: see if there is a strstr
set strstr d_strstr
eval $inlibc

# Revision 1.1.1.1  1995/04/19  20:38:27  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:55  wfp5p
# Elm 2
#
: see if there is a strtok
set strtok d_strtok
eval $inlibc

# Revision 1.2  1996/05/09  15:50:35  wfp5p
# Alpha 10
#
# Revision 1.1.1.1  1995/04/19  20:38:27  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:54  wfp5p
# Elm 2
#
case "$d_subshell" in
"$define") dflt=y;;
"$undef")  dflt=n;;
*)	dflt=y;;
esac
$cat <<EOM
 
Some sites wish to disable the usage of the shell escape from Elm.
If you choose, you can disallow subshells from within Elm.

WARNING: This only controls Elm's usage of the ! command.  Any pager
or editor could still allow subshells.  It is also trivial to get a
subshell through manipulation of the pipe command or various option
settings.  DO NOT rely on this as a security measure.

EOM
rp="Would you like to allow the ! command (subshells)? [$dflt]"
$echo $n "$rp $c"
. myread
case "$ans" in
y*) d_subshell="$define";;
*)  d_subshell="$undef";;
esac

: see if symlink exists
set symlink d_symlink
eval $inlibc

: see if tempnam exists
set tempnam d_tempnam
eval $inlibc

# Revision 1.1.1.1  1995/04/19  20:38:27  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:55  wfp5p
# Elm 2
#
: see if this is a termio system
: Prefer POSIX-approved termios.h over all else.
:
echo " "
d_termios="$undef"
d_termio="$undef"
if $test -r /usr/include/termios.h ; then
    set tcsetattr d_termios
    eval $inlibc
fi
if $test "$d_termios" = "$define" ; then
    echo "You have POSIX termios.h... good!"
elif Cppsym pyr ; then
    if $test "`/bin/universe`" = "ucb" ; then
	if $test -r /usr/include/sgtty.h ; then
	    echo "sgtty.h found."
	else
	    echo "System is a pyramid, and universe is bsd,"
	    echo "sgtty.h not found--you could have problems."
	fi
    else
	if $test -r /usr/include/termio.h ; then
	    d_termio="$define"
	    echo "termio.h found."
	else
	    echo "System is a pyramid, and universe is att,"
	    echo "termio.h not found--you could have problems."
	fi
    fi
elif bsd ; then
    if $test -r /usr/include/sgtty.h ; then
	echo "sgtty.h found."
    elif $test -r /usr/include/termio.h ; then
	d_termio="$define"
	echo "termio.h found."
    else
	echo "Neither termio.h nor sgtty.h found--you could have problems."
    fi
else
    if $test -r /usr/include/termio.h ; then
	d_termio="$define"
	echo "termio.h found."
    elif $test -r /usr/include/sgtty.h ; then
	echo "sgtty.h found."
    else
	echo "Neither termio.h nor sgtty.h found--you could have problems."
    fi
fi

# Revision 1.1.1.1  1995/04/19  20:38:27  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:54  wfp5p
# Elm 2
#
: check for valid reply/to fields
case "$d_useembed" in
"$define")	dflt=y;;
"$undef")	dflt=n;;
*)	        if $test "$d_internet" = "$define" ; then
	            dflt=y
	        else
	            dflt=n
	        fi
	        ;;
esac
$cat <<EOM
 
One of the more annoying quirks of the UUCP network and various other
systems that interact with it are that everyone seems to have different
ideas about how to do routing, etc.  Therefore, a lot of times e-mail
will arrive from off site with corrupt, unusable "Reply-To:" and "From:"
fields.  This next question relates to whether your site is liable to
get mangled fields or not...

Does your site receive e-mail with valid "Reply-To:" and "From:" fields?

EOM
$echo $n "Use Reply-To: and From: addresses? [$dflt] $c"
rp="Are Reply-to: and From: addresses reliable? [$dflt]"
. myread
case "$ans" in
y*) d_useembed="$define";;
*)  d_useembed="$undef";;
esac

: see if getdomainname exists
if $contains "^getdomainname\$" libc.list > /dev/null 2>&1; then
    echo "getdomainname() found"
    d_domname=$define;
elif $contains "^getdomnm\$" libc.list > /dev/null 2>&1; then
    echo "getdomainname() found"
    d_domname=$define;
else
    echo "getdomainname() not found"
    d_domname=$undef
fi

case "$d_domname" in
"$define")	cat <<EOM

The getdomainname system call was found.  When running NIS, this usually
returns the NIS domain and not the mail domain.  If this is the case,
it should not be used to obtain the domain name, and the domain name
should be compiled into the code, and the global elm.rc file should
be used to override the compiled in value.

If the getdomainname call does return the correct mail domain, it can
be used.

EOM
		case "$d_usegetdom" in
		"$define")	dflt=y;;
		"$undef")	dflt=n;;
		*)		dflt=n;;
		esac
		echo " "
		rp="Should getdomainname() be used to obtain the mail domain? [$dflt]"
		$echo $n "$rp $c"
		. myread
		case "$ans" in
		y*) d_usegetdom="$define";;
		*)  d_usegetdom="$undef";;
		esac
		;;
*)		d_usegetdom="$undef";;
esac;
# Revision 1.1.1.1  1995/04/19  20:38:28  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:54  wfp5p
# Elm 2
#
: see if we should include time.h, sys/time.h, or both
cat <<'EOM'
  
Testing to see if we should include <time.h>, <sys/time.h> or both.
I'm now running the test program...
EOM
$cat >try.c <<'EOCP'
#ifdef I_TIME
#include <time.h>
#endif
#ifdef I_SYSTIME
#ifdef SYSTIMEKERNEL
#define KERNEL
#endif
#include <sys/time.h>
#endif
main()
{
    struct tm foo;
#ifdef S_TIMEVAL
    struct timeval bar;
#endif
    if (foo.tm_sec == foo.tm_sec)
	exit(0);
#ifdef S_TIMEVAL
    if (bar.tv_sec == bar.tv_sec)
	exit(0);
#endif
    exit(1);
}
EOCP
flags=''
for s_timeval in '-DS_TIMEVAL' ''; do
    for d_systimekernel in '' '-DSYSTIMEKERNEL'; do
	for i_time in '-DI_TIME' ''; do
	    for i_systime in '-DI_SYSTIME' ''; do
		case "$flags" in
		'') echo "Trying $i_time $i_systime $d_systimekernel $s_timeval"
		    if $cc $ccflags $i_time $i_systime $d_systimekernel $s_timeval \
			    try.c -o try >/dev/null 2>&1 ; then
			set X $i_time $i_systime $d_systimekernel $s_timeval
			shift
			flags="$*"
			echo "Succeeded with $flags"
		    fi
		    ;;
		esac
	    done
	done
    done
done
case "$flags" in
*SYSTIMEKERNEL*) d_systimekernel="$define";;
*) d_systimekernel="$undef";;
esac
case "$flags" in
*I_TIME*) i_time="$define";;
*) i_time="$undef";;
esac
case "$flags" in
*I_SYSTIME*) i_systime="$define";;
*) i_systime="$undef";;
esac
$rm -f try.c try

: see if utime.h is in includepath
echo " "
i_utime=`loc utime.h "" /usr/include $includepath`
if $test -n "$i_utime"; then
	echo "Found <utime.h>"
	i_utime="$define"
	i_sysutime="$undef"
else
	i_sysutime=`loc sys/utime.h "" /usr/include $includepath`
	if $test -n "$i_sysutime"; then
		echo "Found <sys/utime.h>"
		i_utime="$undef"
		i_sysutime="$define"
	else
		echo "Did not find <utime.h> or <sys/utime.h>"
		i_utime="$undef"
		i_sysutime="$undef"
	fi
fi

# Revision 1.1.1.1  1995/04/19  20:38:27  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:54  wfp5p
# Elm 2
#
: check for utimbuf structure
echo " "
case "$d_utimbuf" in
"$define")	;;
"$undef")	;;
*)
: Pyramid passes the att compile test but still needs the definition
	if Cppsym pyr ; then
	    if $test "`/bin/universe`" = "att" ; then
		d_utimbuf="$undef"
		echo "I will use my 'utimbuf' structure..."
	    else
		d_utimbuf="$define"
		echo "You have the 'utimbuf' structure..."
            fi
	else
	  if $test "$d_utimbuf" != "$define"; then
	      echo "Checking to see if struct utimbuf exists."
	      $cat >try.c <<'EOCP'
#include <stdio.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#define far /* to keep Xenix from complaining */
#if (defined(BSD) || !defined(apollo))
#  include <sys/file.h>
#endif
#ifdef I_TIME
#  include <time.h>
#endif
#ifdef I_SYSTIME
#  include <sys/time.h>
#endif
#ifdef BSD
#  include <sys/timeb.h>
#endif
#ifdef I_UTIME
#  include <utime.h>
#endif
#ifdef I_SYSUTIME
#  include <sys/utime.h>
#endif

main()
{
struct utimbuf test;
test.actime = 0;
exit(1);
}
EOCP
	      cflags=$ccflags
	      if $test "$i_utime" = "$define"; then
		  cflags="$cflags -DI_UTIME"
	      fi
	      if $test "$i_sysutime" = "$define"; then
		  cflags="$cflags -DI_SYSUTIME"
	      fi
	      if $test "$i_time" = "$define"; then
		  cflags="$cflags -DI_TIME"
	      fi
	      if $test "$i_systime" = "$define"; then
		  cflags="$cflags -DI_SYSTIME"
	      fi
	      if $test "$d_bsd" = "$define"; then
		  cflags="$cflags -DBSD"
	      fi
	      if $cc $cflags try.c -o try >/dev/null 2>&1 ; then
		  d_utimbuf="$define"
		  echo "You have the 'utimbuf' structure..."
	      else
		  echo "I will use my 'utimbuf' structure..."
		  d_utimbuf="$undef"
	      fi
	      $rm -f try.c try.o try
	    fi
	fi
	;;
esac

# Revision 1.1.1.1  1995/04/19  20:38:27  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:55  wfp5p
# Elm 2
#
: see if there is a vfork
if Cppsym sgi ; then
    d_vfork="$undef"
else
    set vfork d_vfork
    eval $inlibc
fi

: see if memory.h is in includepath
echo " "
i_memory=`loc memory.h "" /usr/include $includepath`
if $test -n "$i_memory"; then
	echo "Found <memory.h>"
	i_memory="$define"
else
	echo "Did not find <memory.h>"
	i_memory="$undef"
fi

: see if stdarg.h is in includepath
echo " "
i_stdarg=`loc stdarg.h "" /usr/include $includepath`
if $test -n "$i_stdarg"; then
	echo "Found <stdarg.h>"
	i_stdarg="$define"
else
	echo "Did not find <stdarg.h>"
	i_stdarg="$undef"
fi

: see if stdlib.h is in includepath
echo " "
i_stdlib=`loc stdlib.h "" /usr/include $includepath`
if $test -n "$i_stdlib"; then
	echo "Found <stdlib.h>"
	i_stdlib="$define"
else
	echo "Did not find <stdlib.h>"
	i_stdlib="$undef"
fi

: see if unistd.h is in includepath
echo " "
i_unistd=`loc unistd.h "" /usr/include $includepath`
if $test -n "$i_unistd"; then
	echo "Found <unistd.h>"
	i_unistd="$define"
else
	echo "Did not find <unistd.h>"
	i_unistd="$undef"
fi

# Revision 1.2  1996/10/28  16:57:58  wfp5p
# Beta 1
#
# Revision 1.1.1.1  1995/04/19  20:38:28  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:54  wfp5p
# Elm 2
#
: see if signal is declared as pointer to function returning int or void
echo " "
$cppstdin $cppflags < /usr/include/signal.h >$$.tmp
if $contains 'void.*[^s]signal' $$.tmp >/dev/null 2>&1 ; then
    echo "You have void (*signal())() instead of int."
    sigtype="void"
elif $contains 'int.*[^sg]signal' $$.tmp >/dev/null 2>&1 ; then
    echo "You have int (*signal())() instead of void."
    sigtype="int"
elif $contains 'extern[ 	]*[(\*]*signal' $$.tmp >/dev/null 2>&1 ; then
    echo "You have int (*signal())() instead of void."
    sigtype="int"
elif $contains 'sigfunc_t.*[^s]signal' $$.tmp >/dev/null 2>&1 ; then
    echo "You have sigfunc_t (*signal())() instead of int."
    sigtype="sigfunc_t"
elif $test -n "$sigtype"; then
    echo $n "As you already told me, signal handlers return $sigtype"
else
    echo "I can't determine whether signal handlers return void or int..."
    echo "I'm assuming they return void like ANSI and POSIX want."
    echo "If not, you will have to change sigtype to match the typedef"
    echo "used by the signal handlers.  Change it config.sh at the edit "
    echo "question at the end of Configure."
    sigtype="void"
fi
rm -f $$.tmp

: preserve RCS keywords in files with variable substitution, grrr
Log='$Log'
Header='$Header'

# Revision 1.1.1.1  1995/04/19  20:38:27  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:55  wfp5p
# Elm 2
#
: get default batch subject
$cat <<EOM
 
Elm will provide a default subject for mail messages that are sent
in batch mode (redirected from a file.)
EOM

case "$defbatsub" in
    '') dflt='no subject (file transmission)';;
    *)  dflt="$defbatsub";;
esac
echo " "
rp="Default batch subject: [$dflt]"
$echo $n "$rp $c"
. myread
defbatsub="$ans"

# Revision 1.1.1.1  1995/04/19  20:38:27  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:56  wfp5p
# Elm 2
#
: determine default editor
case "$defeditor" in
'')
    case "$vi" in
    */*) dflt="$vi";;
    *) dflt=/usr/ucb/vi;;
    esac
    ;;
*)  dflt="$defeditor"
    ;;
esac

$cat <<EOM

Elm must be configured with a default editor.  On most systems this may
be 'vi'.  If you prefer to use some other, easier editor enter it here.
You will be given a change to provide command line options to this
command in the next question.

EOM

cont=true
while $test "$cont" ; do
    echo " "
    rp="What is the default editor on your system? [$dflt]"
    $echo $n "$rp $c"
    . myread
    defeditor="$ans"
    if $test -f "$ans"; then
	cont=''
    else
	lookup=`loc "$ans" "" . $pth`
	if $test -f "$lookup"; then
	    cont=''
	    defeditor=$lookup
	else
	    if $test "$fastread" = yes; then
	        dflt=y
	    else
	        dflt=n
	    fi
	    echo "Editor $ans doesn't exist."
	    rp="Use that name anyway? [$dflt]"
	    $echo $n "$rp $c"
	    . myread
	    dflt=''
	    case "$ans" in
	    y*) cont='';;
	    esac
        fi
    fi
done

: determine the editor flags to use
$cat <<EOM

If this editor requires any options for proper use, specify them
here.  To specify no options, enter the word "none".  For example,
'pico' users will want to use the -t option.  This is the proper
place to specify that option.

EOM
dflt="$editoropts"
rp="What options should Elm use with $defeditor: [$dflt]"
$echo $n "$rp $c"
. myread
editoropts=$ans
case "$editoropts" in
'none') editoropts=''
     ;;
esac

# Revision 1.3  1995/06/09  22:05:38  wfp5p
# The default is now remembered from the last time Configure was run.
#
# Revision 1.2  1995/06/09  14:21:44  wfp5p
# Changed so that you can specify a different install path.
#
# Revision 1.1  1995/06/08  15:45:54  wfp5p
# Changed bin to allow a different install dir
#
: determine where public executables go
case "$bin" in
'')
    dflt=`loc . /bin /usr/local/bin /usr/lbin /usr/local /usr/bin`
    ;;
*)  dflt="$bin"
    ;;
esac
cont=true
while $test "$cont" ; do
    echo " "
    rp="Where do you want to put the public executables? [$dflt]"
    $echo $n "$rp $c"
    . myread
    bin="$ans"
    bin=`filexp $bin`
    if test -d $bin; then
	cont=''
    else
	case "$fastread" in
	yes) dflt=y;;
	*) dflt=n;;
	esac
	rp="Directory $bin doesn't exist.  Use that name anyway? [$dflt]"
	$echo $n "$rp $c"
	. myread
	dflt=''
	case "$ans" in
	y*) cont='';;
	esac
    fi
done

case "$installbin" in
'')
    dflt="$bin"
    ;;
*)  dflt="$installbin"
    ;;
esac
cont=true

while $test "$cont" ; do
    echo " "
    rp="What path do you want to use to install the public executables? [$dflt]"
    $echo $n "$rp $c"
    . myread
    installbin="$ans"
    installbin=`filexp $installbin`
    if test -d $installbin; then
	cont=''
    else
	case "$fastread" in
	yes) dflt=y;;
	*) dflt=n;;
	esac
	rp="Directory $installbin doesn't exist.  Use that name anyway? [$dflt]"
	$echo $n "$rp $c"
	. myread
	dflt=''
	case "$ans" in
	y*) cont='';;
	esac
    fi
done

# Revision 1.5  1999/03/24  14:03:33  wfp5p
# elm 2.5PL0
#
# Revision 1.4  1995/06/09  22:05:39  wfp5p
# The default is now remembered from the last time Configure was run.
#
# Revision 1.3  1995/06/08  15:44:42  wfp5p
# Changes to configure for AIX
#
# Revision 1.2  1995/04/26  18:49:46  wfp5p
# Changed Configure to allow a different install path
#
# Revision 1.1.1.1  1995/04/19  20:38:28  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:55  wfp5p
# Elm 2
#

: determine where public libraries go

$cat <<EOM

Elm needs a place to store its support files.  This includes things
such as configuration and help information.  They are all readable
text files, that may be shared across machines.
EOM

case "$lib" in
'')
    dflt=`loc . "." /usr/local/lib /usr/lib /lib`
    ;;
*)  dflt="$lib"
    ;;
esac
cont=true
while $test "$cont" ; do
    echo " "
    rp="Where do you want to put the support files? [$dflt]"
    $echo $n "$rp $c"
    . myread
    lib="$ans"
    lib=`filexp $lib`
    if $test -d "$lib"; then
	cont=''
    else
	case "$fastread" in
	yes)	dflt=y;;
	*)	dflt=n;;
	esac
	rp="Directory $lib doesn't exist.  Use that name anyway? [$dflt]"
	$echo $n "$rp $c"
	. myread
	dflt=''
	case "$ans" in
	y*) cont='';;
	esac
    fi
done

case "$installlib" in
'')
    dflt="$lib"
    ;;
*)  dflt="$installlib"
    ;;
esac
cont=true

while $test "$cont" ; do
    echo " "
    rp="What path do you want to use to install the public files? [$dflt]"
    $echo $n "$rp $c"
    . myread
    installlib="$ans"
    installlib=`filexp $installlib`
    if $test -d "$installlib"; then
	cont=''
    else
	case "$fastread" in
	yes)	dflt=y;;
	*)	dflt=n;;
	esac
	rp="Directory $installlib doesn't exist.  Use that name anyway? [$dflt]"
	$echo $n "$rp $c"
	. myread
	dflt=''
	case "$ans" in
	y*) cont='';;
	esac
    fi
done

: ask the preferred line printer and options for this system.
case "$linepr" in
'')
    if $test -f "$lp"; then
	dflt="$lp"
    elif $test -f "$lpr"; then
	dflt="$lpr"
    else
	dflt=
    fi
    ;;
*)  dflt="$linepr";;
esac

linepr='blurfl/dyick'
$cat <<EOM

Elm has an option to send messages to the printer.  This question
asks for the default spooler name.  You can also specify options to
the command by separating them from the command by at least one space. 

EOM
cont=true
while $test "$cont" ; do
    rp="What print spooler do you prefer to use with Elm? [$dflt]"
    $echo $n "$rp $c"
    . myread
    linepr="$ans"
    ans=`$expr "$linepr" : "\([^ ]*\).*"`
    case "$ans" in
    /*)
	if $test -f "$ans"; then
	    cont=''
	else
	    if $test "$fastread" = yes; then
		dflt=y
	    else
		dflt=n
	    fi
	    rp="File $ans doesn't exist.  Use that name anyway? [$dflt]"
	    $echo $n "$rp $c"
	    . myread
	    case "$ans" in
	    y*) cont='';;
	    esac
	fi
	;;
    *)
        if $test "$fastread" = yes; then
	    echo "The print spooler needs to be a full path name."
	    echo "Using the current, possibly improper, value."
	    cont=''
	else
	    echo "Please give the full path name."
	fi
	;;
    esac
done

# Revision 1.1.1.1  1995/04/19  20:38:28  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:55  wfp5p
# Elm 2
#
: determine where mail is spooled
case "$maildir" in
'')
    dflt=`loc . /usr/spool/mail /usr/spool/mail /var/mail /usr/mail`
    ;;
*)  dflt="$maildir"
    ;;
esac
cont=true
while $test "$cont" ; do
    echo " "
    rp="Where is yet-to-be-read mail spooled? [$dflt]"
    $echo $n "$rp $c"
    . myread
    maildir=`filexp "$ans"`
    if test -d $maildir; then
	cont=''
    else
	if $test "$fastread" = yes; then
	    dflt=y
	else
	    dflt=n
	fi
	rp="Directory $maildir doesn't exist.  Use that name anyway? [$dflt]"
	$echo $n "$rp $c"
	. myread
	dflt=''
	case "$ans" in
	y*) cont='';;
	esac
    fi
done

# Revision 1.1.1.1  1995/04/19  20:38:28  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:54  wfp5p
# Elm 2
#
: determine the group of the mail directory and what group elm should use
mailgrp=`$ls -lgd $maildir/.`
mailgrp=`$expr "$mailgrp" : "[ld][rwxstS-]*[ 0123456789]*\(.*\)"`
: now mailgrp is either    user group size mon day time/year name
: or                       group size mon day time/year name
try1=`$expr "$mailgrp" : "[A-Za-z_0-9]* *\([A-Za-z_0-9]*\).*"`
try1a=`$expr "$try1" : "\([0-9]*\).*"`
if $test "$try1" = "$try1a"; then
    mailgrp=`$expr "$mailgrp" : "\([A-Za-z_0-9]*\).*"`
else
    mailgrp="$try1"
fi
case "$mailgrp" in
'')
    mailgrp=mail
    ;;
esac
echo " "
echo "Mail group is $mailgrp"

# Revision 1.1.1.1  1995/04/19  20:38:27  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:55  wfp5p
# Elm 2
#
: ask about setgid running of Elm
case "$d_setgid" in
"$define")	dflt=y;;
"$undef")	dflt=n;;
*)		dflt=y;;
esac
cat <<EOM

Elm needs to be installed and run as a setgid program only if the mail
spool directory permissions do not allow world write access.  If your
mail spool directory has the permissions:

drwxrwxr-x  3 root     mail          512 Dec 24 17:20 /usr/mail

then Elm must be setgid to the same group as the mail spool directory
(in this case group mail).  However, if the spool permissions look
like:

drwxrwsrwt  2 root     staff         512 Dec 21 20:14 /usr/spool/mail

then Elm should not be installed or run as a setgid program.

EOM
rp="Am I going to be running as a setgid program? [$dflt]"
$echo $n "$rp $c"
. myread
case "$ans" in
y*) d_setgid="$define";;
*)  d_setgid="$undef";;
esac
case "$d_setgid" in
"$define")
    mailermode=2755
    cat <<EOM

Since Elm is being installed as a setgid program, it must be installed
by root, or a user able to set the setgid bit.

To provide better security, Elm can be configured to switch to the
privileged group of $mailgrp only when necessary to access mail folders.

Unfortunately, not all machines can switch between the real and effective 
gid values.  If you are not sure of the capability of your machine, it
is suggested that you start with Elm configured to switch gid values and
if, when you run Elm it cannot set the lock for the mailbox, reconfigure
Elm to not use this feature.
EOM
    case "$d_savegrpmboxid" in
    "$define")	dflt=y;;
    "$undef")	dflt=n;;
    *)		dflt=y;;
    esac
    echo " "
    rp="Can your system use setgid() to switch between the real and
effective gid values? [$dflt]"
    $echo $n "$rp $c"
    . myread
    case "$ans" in
    y*) d_savegrpmboxid="$define";;
    *)  d_savegrpmboxid="$undef";;
    esac
    ;;
*)  mailermode=755
    d_savegrpmboxid="$undef"
    ;;
esac

: ask the preferred pager for this system.
case "$pager" in
'') dflt="builtin+";;
*)  dflt="$pager";;
esac

pager='blurfl/dyick'
echo " "
cont=true
while $test "$cont" ; do
    rp="What pager do you prefer to use with $package? [$dflt]"
    $echo $n "$rp $c"
    . myread
    pager="$ans"
    case "$ans" in
    builtin)
        cont=''
	;;
    builtin+)
        cont=''
	;;
    /*)
	if $test -f "$ans"; then
	    cont=''
	else
	    if $test "$fastread" = yes; then
		dflt=y
	    else
		dflt=n
	    fi
	    rp="File $ans doesn't exist.  Use that name anyway? [$dflt]"
	    $echo $n "$rp $c"
	    . myread
	    case "$ans" in
	    y*) cont='';;
	    esac
	fi
	;;
    *)
	echo "Please give the full path name."
	;;
    esac
done

: find out which shell people like to use most
case "$prefshell" in
'')
    if $test -f /bin/ksh; then
	dflt='/bin/ksh'
    elif $test -f /bin/csh; then
	dflt='/bin/csh'
    else
	dflt='/bin/sh'
    fi
    ;;
*)  dflt="$prefshell";;
esac
cont=true
while $test "$cont" ; do
    echo " "
    echo "Give the full path name of the shell most people like to use on your"
    $echo $n "system: [$dflt] $c"
    rp="Preferred shell: [$dflt]"
    . myread
    prefshell=$ans
    if test -f $ans; then
	cont=''
    else
	if $test "$fastread" = yes; then
	    dflt=y
	else
	    dflt=n
	fi
	rp="File $ans doesn't exist.  Use that name anyway? [$dflt]"
	$echo $n "$rp $c"
	. myread
	dflt=''
	case "$ans" in
	y*) cont='';;
	esac
    fi
done

: see if ar generates random libraries by itself
echo " "
echo "Checking how to generate random libraries on your machine..."
ar rc ran.a /dev/null
if ar ts ran.a >/dev/null 2>&1; then
	echo "ar appears to generate random libraries itself."
	orderlib=false
	ranlib=":"
else
	if test -f /usr/bin/ranlib; then
		ranlib=/usr/bin/ranlib
	elif test -f /bin/ranlib; then
		ranlib=/bin/ranlib
	fi

	if test -n "$ranlib"; then
		echo "your system has $ranlib; we'll use that."
		orderlib=false
	else
		echo "your system doesn't seem to support random libraries"
		echo "so we'll use lorder and tsort to order the libraries."
		orderlib=true
		ranlib=":"
	fi
fi

# Revision 1.1.1.1  1995/04/19  20:38:28  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:55  wfp5p
# Elm 2
#
: determine the name of the tape device
rmttape=`loc rct0 "" /dev`
if $test -z "$rmttape"; then
	rmttape=`loc rmt0 "" /dev`
fi
if $test -z "$rmttape"; then
	rmttape=`loc rtp0 "unknown-remote-tape-unit" /dev`
fi
echo "remote tape drive is $rmttape"
echo " "
# Revision 1.1  1995/09/29  17:58:46  wfp5p
# These were missing from rcs...
#
 
: locate the termlib routines

echo " "
case "$termlib" in
'')
    echo "Looking for your termlib routines..."
    cat >try.c << 'EOF'
#include <stdio.h>
char tbuf[1024];
main()
{
    /* return codes:  -1 == error,  0 == unknown term,  1 == ok */
    exit(tgetent(tbuf, "vt100") >= 0 ? 0 : 1);
}
EOF
    for dflt in -lcurses -lncurses -ltermlib -ltermcap none ; do
	case "$dflt" in
	none)
	    $echo "I cannot seem to find your termlib routines."
	    break
	    ;;
	esac
	echo "Trying $dflt..."
	$cc $ccflags -o try try.c $dflt >/dev/null 2>&1
	if $test $? -eq 0 -a -f try ; then
	    if ./try >/dev/null 2>&1 ; then
		$echo "That seems to work."
		break
	    fi
	fi
    done
    rm -f try.c try.o try
    ;;
*)
    dflt="$termlib"
    ;;
esac
echo " "
echo "Enter the name of the library that contains your termlib routines."
echo "Either \"-lfoo\" or \"/lib/foo.a\" format is OK."
echo "Enter \"none\" if no special library needs to be loaded."
echo " "
rp="Where is the library with your termlib routines? [$dflt]"
echo $n "$rp $c"
. myread
case "$ans" in
	'')	ans="$dflt" ;;
esac
case "$ans" in
	none)	termlib= ;;
	*)	termlib="$ans" ;;
esac
 
# Revision 1.1.1.1  1995/04/19  20:38:28  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:56  wfp5p
# Elm 2
#
: determine where temporary files should go
case "$tmpdir" in
'')
    dflt=`loc . "." "/tmp /usr/tmp"`
    ;;
*)  dflt="$tmpdir"
    ;;
esac
if $test -d "$tmpdir" -a "$tmpdir" != ""; then
	$echo " "
	$echo "Temporary files will be put in the $tmpdir directory"
else
	cont=true
	while $test "$cont" ; do
	    $echo " "
	    rp="Where do you want to put the temporary files? [$dflt]"
	    $echo $n "$rp $c"
	    . myread
	    tmpdir="$ans"
	    tmpdir=`filexp $tmpdir`
	    if $test -d "$tmpdir" -a "$tmpdir" != ""; then
		cont=''
	    else
		if $test "$fastread" = yes; then
		    dflt=y
		else
		    dflt=n
		fi
		rp="Directory $tmpdir doesn't exist.  Use that name anyway? [$dflt]"
		$echo $n "$rp $c"
		. myread
		dflt=''
		case "$ans" in
		y*) cont='';;
		esac
	    fi
	done
fi

# Revision 1.3  1995/09/29  17:40:33  wfp5p
# Alpha 8 (Chip's big changes)
#
# Revision 1.2  1995/06/30  14:56:07  wfp5p
# Alpha 5
#
# Revision 1.1.1.1  1995/04/19  20:38:28  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:53  wfp5p
# Elm 2
#
: figure out timezone handling

cp $source_dir/lib/get_tz.c try.c 2>/dev/null \
	|| $echo "Oh no!  I cannot find the \"lib/get_tz.c\" file."
cat >elm_defs.h <<EOF
#$i_time I_TIME
#$i_systime I_SYSTIME
#include <stdio.h>
#include <sys/types.h>
EOF
$echo " "
dflt_handling=$tzname_handling
tzname_handling=
if $test -f try.c ; then
    $echo "Figuring out how to get timezone names."
    for tzname_handling in DFLT TM_NAME TM_ZONE TZNAME TIMEZONE ERROR ; do
	case "$tzname_handling" in
	DFLT)		$test "$dflt_handling" = "" && continue
			tzname_handling=$dflt_handling
			;;
	ERROR)		tzname_handling=
			break
			;;
	$dflt_handling)	: avoid doing default twice
			continue
			;;
	esac
	$echo "Trying -DTZNAME_USE_$tzname_handling"
	$cc -D_CONFIGURE -DTZNAME_USE_$tzname_handling $ccflags \
		try.c -o try >/dev/null 2>&1
	if $test $? -eq 0 && ./try >try.out 2>&1 ; then
		$echo "Alright!  That seems to have worked."
		break
	fi
    done
fi
if $test "$tzname_handling" = "" ; then
    $echo "I cannot figure out how to get timezone names."
    if $test "$dflt_handling" != "" ; then
	tzname_handling="$dflt_handling"
	$echo "You said \"$tzname_handling\" worked last time so I'll use that."
    else
	tzname_handling=UNKNOWN
	$echo "You will have to set \"tzname_handling\" manually."
    fi
fi
$rm -f elm_defs.h try.c try.o try try.out

# Revision 1.3  1995/07/18  18:59:39  wfp5p
# Alpha 6
#
# Revision 1.2  1995/06/30  14:56:05  wfp5p
# Alpha 5
#
# Revision 1.1.1.1  1995/04/19  20:38:26  wfp5p
# Initial import of elm 2.4 PL0 as base for elm 2.5.
#
# Revision 1.1.1.1  1995/04/13  19:38:54  wfp5p
# Elm 2
#

: the "config.over" file can be used to patch configuration changes
if test -f ../config.over ; then
	echo " "
	echo "I have found a \"config.over\" file."
	dflt=y
	rp="Do you want to load the \"config.over\" file? [$dflt]"
	$echo $n "$rp $c"
	. myread
	case "$ans" in
    	n*)	echo "OK, I'll ignore it."
		;;
	*)	. ../config.over
		echo "Configuration override changes have been loaded from config.over."
		;;
	esac
fi

: clean up one time files
for file in OneTime.PL* ; do
	if test -f "$file" ; then
		echo "Removing patch cleanup script $file . . ."
		rm -f $file
	fi
done

echo " "
echo "End of configuration questions."
echo " "

: create config.sh file
echo " "
if test -d ../UU; then
    cd ..
fi
echo "Creating config.sh..."
$spitshell <<EOT >config.sh
$startsh
# config.sh
# This file was produced by running the Configure script.

Log='$Log'
Header='$Header'
contains='$contains'
cppstdin='$cppstdin'
cppminus='$cppminus'
d_getopt='$d_getopt'
d_memcpy='$d_memcpy'
d_mkdir='$d_mkdir'
d_rename='$d_rename'
d_symlink='$d_symlink'
d_whoami='$d_whoami'
n='$n'
c='$c'
orderlib='$orderlib'
ranlib='$ranlib'
package='$package'
pager='$pager'
prefshell='$prefshell'
startsh='$startsh'
d_eunice='$d_eunice'
define='$define'
eunicefix='$eunicefix'
build_dir='$build_dir'
source_dir='$source_dir'
loclist='$loclist'
expr='$expr'
sed='$sed'
echo='$echo'
cat='$cat'
rm='$rm'
mv='$mv'
cp='$cp'
tail='$tail'
tr='$tr'
mkdir='$mkdir'
sort='$sort'
uniq='$uniq'
grep='$grep'
trylist='$trylist'
test='$test'
inews='$inews'
ispell='$ispell'
egrep='$egrep'
more='$more'
pg='$pg'
Mcc='$Mcc'
vi='$vi'
mailx='$mailx'
mail='$mail'
cpp='$cpp'
perl='$perl'
emacs='$emacs'
ls='$ls'
rmail='$rmail'
sendmail='$sendmail'
shar='$shar'
smail='$smail'
submit='$submit'
tbl='$tbl'
troff='$troff'
nroff='$nroff'
uname='$uname'
uuname='$uuname'
line='$line'
chgrp='$chgrp'
chmod='$chmod'
lint='$lint'
sleep='$sleep'
pr='$pr'
tar='$tar'
ln='$ln'
lpr='$lpr'
lp='$lp'
touch='$touch'
make='$make'
date='$date'
csh='$csh'
pmake='$pmake'
mips='$mips'
col='$col'
pack='$pack'
bld='$bld'
compress='$compress'
execmail='$execmail'
libswanted='$libswanted'
bin='$bin'
installbin='$installbin'
c_date='$c_date'
d_ascii='$d_ascii'
d_broke_ctype='$d_broke_ctype'
d_broke_fflush='$d_broke_fflush'
d_calendar='$d_calendar'
calendar='$calendar'
d_chown_neg1='$d_chown_neg1'
d_content='$d_content'
d_crypt='$d_crypt'
cryptlib='$cryptlib'
d_cuserid='$d_cuserid'
d_disphost='$d_disphost'
d_domname='$d_domname'
d_usegetdom='$d_usegetdom'
d_errlst='$d_errlst'
d_flock='$d_flock'
d_dotlock='$d_dotlock'
d_fcntlock='$d_fcntlock'
lock_dir='$lock_dir'
has_flock='$has_flock'
has_fcntl='$has_fcntl'
d_fsync='$d_fsync'
d_ftruncate='$d_ftruncate'
d_gethname='$d_gethname'
d_douname='$d_douname'
d_host_comp='$d_host_comp'
ign_hname='$ign_hname'
d_index='$d_index'
d_internet='$d_internet'
d_ispell='$d_ispell'
ispell_path='$ispell_path'
ispell_options='$ispell_options'
d_locale='$d_locale'
d_nl_types='$d_nl_types'
d_msgcat='$d_msgcat'
d_usenls='$d_usenls'
d_mboxedit='$d_mboxedit'
d_mime='$d_mime'
defcharset='$defcharset'
defdispcharset='$defdispcharset'
d_mmdf='$d_mmdf'
d_newauto='$d_newauto'
d_noaddfrom='$d_noaddfrom'
d_usedomain='$d_usedomain'
d_noxheader='$d_noxheader'
d_pidcheck='$d_pidcheck'
d_ptem='$d_ptem'
d_putenv='$d_putenv'
d_remlock='$d_remlock'
maxattempts='$maxattempts'
d_setegid='$d_setegid'
d_setgid='$d_setgid'
d_savegrpmboxid='$d_savegrpmboxid'
mailermode='$mailermode'
d_sigvec='$d_sigvec'
d_sigvectr='$d_sigvectr'
d_sigset='$d_sigset'
d_sighold='$d_sighold'
d_sigprocmask='$d_sigprocmask'
d_sigblock='$d_sigblock'
d_sigaction='$d_sigaction'
d_statuschg='$d_statuschg'
d_strcspn='$d_strcspn'
d_strspn='$d_strspn'
d_strpbrk='$d_strpbrk'
d_strerror='$d_strerror'
d_strftime='$d_strftime'
d_strings='$d_strings'
d_pwdinsys='$d_pwdinsys'
strings='$strings'
includepath='$includepath'
d_strstr='$d_strstr'
d_strtok='$d_strtok'
d_subshell='$d_subshell'
d_tempnam='$d_tempnam'
tempnamo='$tempnamo'
tempnamc='$tempnamc'
d_termio='$d_termio'
d_termios='$d_termios'
d_useembed='$d_useembed'
d_utimbuf='$d_utimbuf'
d_vfork='$d_vfork'
defbatsub='$defbatsub'
defeditor='$defeditor'
editoropts='$editoropts'
hostname='$hostname'
phostname='$phostname'
mydomain='$mydomain'
autohostname='$autohostname'
i_memory='$i_memory'
i_stdarg='$i_stdarg'
i_stdlib='$i_stdlib'
i_time='$i_time'
i_systime='$i_systime'
d_systimekernel='$d_systimekernel'
i_unistd='$i_unistd'
i_utime='$i_utime'
i_sysutime='$i_sysutime'
lib='$lib'
installlib='$installlib'
libc='$libc'
linepr='$linepr'
maildir='$maildir'
mailer='$mailer'
mailgrp='$mailgrp'
mansrc='$mansrc'
catmansrc='$catmansrc'
manext='$manext'
manext_choice='$manext_choice'
catmanext='$catmanext'
catmanext_choice='$catmanext_choice'
packed='$packed'
manroff='$manroff'
manroffopts='$manroffopts'
suffix='$suffix'
packer='$packer'
models='$models'
split='$split'
small='$small'
medium='$medium'
large='$large'
huge='$huge'
optimize='$optimize'
ccflags='$ccflags'
cppflags='$cppflags'
ldflags='$ldflags'
cc='$cc'
libs='$libs'
nametype='$nametype'
d_passnames='$d_passnames'
d_berknames='$d_berknames'
d_usgnames='$d_usgnames'
passcat='$passcat'
rmttape='$rmttape'
roff='$roff'
roffopts='$roffopts'
sigtype='$sigtype'
spitshell='$spitshell'
shsharp='$shsharp'
sharpbang='$sharpbang'
termlib='$termlib'
tmpdir='$tmpdir'
tzname_handling='$tzname_handling'
xencf='$xencf'
xenlf='$xenlf'
d_xenix='$d_xenix'
d_bsd='$d_bsd'
CONFIG=true
EOT

# Revision 1.2  1995/07/18  18:59:40  wfp5p
# Alpha 6
#
# Revision 1.1  1995/06/30  14:56:05  wfp5p
# Alpha 5
#
CONFIG=true

echo " "
dflt=''
fastread=''
echo "If you didn't make any mistakes, then just type a carriage return here."
rp="If you need to edit config.sh, do it as a shell escape here:"
$echo $n "$rp $c"
. UU/myread
case "$ans" in
'') ;;
*) : in case they cannot read
    eval $ans;;
esac
: if this fails, just run all the .SH files by hand
. ./config.sh

if test "$source_dir" != "$build_dir" ; then
	echo " "
	echo "Setting up directories for build..."
	for dir in doc hdrs lib src utils ; do
		if $test ! -d $dir ; then
			echo "Creating directory $dir"
			mkdir $dir
		fi
	done
	test -f Configure && rm -f Configure
	cat <<EOT >Configure
$startsh
exec $0 \${1+\$@}
EOT
fi

echo " "
echo "Doing variable substitutions on .SH files..."
set x `awk '{print $1}' <$source_dir/MANIFEST | $grep '\.SH'`
shift
case $# in
0) set x *.SH; shift;;
esac
for file in $*; do sh $source_dir/$file ; done
if test -f config.h.SH; then
    if test ! -f config.h; then
	: oops, they left it out of MANIFEST, probably, so do it anyway.
	. config.h.SH
    fi
fi

if $contains '^depend:' Makefile >/dev/null 2>&1; then
    dflt=n
    $cat <<EOM

Now you need to generate make dependencies by running "make depend".
You might prefer to run it in background: "make depend > makedepend.out &"
It can take a while, so you might not want to run it right now.

EOM
    rp="Run make depend now? [$dflt]"
    $echo $n "$rp $c"
    . UU/myread
    case "$ans" in
    y*) make depend && echo "Now you must run a make."
	;;
    *)  echo "You must run 'make depend' then 'make'."
	;;
    esac
elif test -f Makefile; then
    echo " "
    echo "Now you must run a make."
else
    echo "Done."
fi

$rm -f kit*isdone
: the following is currently useless
cd UU && $rm -f $rmlist
: since this removes it all anyway
cd .. && $rm -rf UU
: end of Configure
